"var Component=(()=>{var c=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var n in e)i(r,n,{get:e[n],enumerable:!0})},s=(r,e,n,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!w.call(r,o)&&o!==n&&i(r,o,{get:()=>e[o],enumerable:!(h=f(e,o))||h.enumerable});return r};var b=(r,e,n)=>(n=r!=null?c(m(r)):{},s(e||!r||!r.__esModule?i(n,\"default\",{value:r,enumerable:!0}):n,r)),v=r=>s(i({},\"__esModule\",{value:!0}),r);var l=y((_,a)=>{a.exports=_jsx_runtime});var x={};g(x,{default:()=>u});var t=b(l());function d(r){let e={em:\"em\",h2:\"h2\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...r.components},{InfoAlert:n}=e;return n||T(\"InfoAlert\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:`The Routes tab shows you all the routes in your React Router application either in the tree view or a list view.\nThe default is the tree view which shows the routes in a nested tree structure. You can switch to the list view by\nclicking the list icon in the top left corner of the tab.`}),`\n`,(0,t.jsx)(e.p,{children:\"The featureset is identical across both but only shown differently based on your preference.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The only difference is the fact that the \",(0,t.jsx)(e.strong,{children:\"tree view\"}),` shows you which routes are currently active on the page. This is\nindicated by a golden line going through the tree from the root to the active route. The `,(0,t.jsx)(e.strong,{children:\"list view\"}),` does not have this\nfeature.`]}),`\n`,(0,t.jsx)(e.h2,{id:\"route-types\",children:\"Route types\"}),`\n`,(0,t.jsx)(e.p,{children:\"There are three types of routes in react-router-devtools:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:\"root\"}),` - The root route is the first route that is loaded when you open the application.\nIt is the first route in the tree. (purple)`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:\"route\"}),` - A route is a route that is not a root route. It is a route that is nested under another route and has\na url segment. (green)`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:\"layout\"}),` - A layout is a route that is not a root route and is a special kind of route that does not have a url\nsegment but provides only an outlet with some layout for the child routes (blue)`]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"route-info\",children:\"Route info\"}),`\n`,(0,t.jsx)(e.p,{children:`Clicking on any route name will show you detailed information about that route. This includes the route's name, the\nroute's path, the route's url, the route's file and does it contain the following things:`}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:\"loader\"}),` - The loader is the function that is called when the route is loaded. It is responsible for fetching the data\nneeded for the route.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:\"action\"}),` - The action is the function that is called when the route is submitted. It is responsible for handling the\nform submission.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:\"ErrorBoundary\"}),` - The ErrorBoundary is the component that is called when the route has an error. It is responsible for\nshowing the error message to the user.`]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"All of these segments are colored in either red or green indicating if it exists or not.\"}),`\n`,(0,t.jsx)(n,{children:(0,t.jsx)(e.p,{children:`The error boundary will tell you if the error boundary for the current route comes from the route itself or is inherited\nfrom a parent route. If it is inherited, it will show you the name of the parent route.`})}),`\n`,(0,t.jsx)(e.h2,{id:\"wildcard-parameters\",children:\"Wildcard parameters\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If a route has a wildcard parameter, it will be shown in the \",(0,t.jsx)(e.strong,{children:\"Wildcard parameters\"}),` section which allows you to enter\nany value for the wildcard parameter. This is useful when combined with the `,(0,t.jsx)(e.strong,{children:\"Open in Browser\"}),` button that redirects\nyou to the route with the wildcard parameter.`]}),`\n`,(0,t.jsx)(e.p,{children:\"The wildcard values are saved in the browser so you can persist them across development sessions.\"})]})}function u(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(d,{...r})}):d(r)}function T(r,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return v(x);})();\n;return Component;"