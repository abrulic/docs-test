"var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var o in e)r(n,o,{get:e[o],enumerable:!0})},a=(n,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of y(e))!m.call(n,i)&&i!==o&&r(n,i,{get:()=>e[i],enumerable:!(s=f(e,i))||s.enumerable});return n};var w=(n,e,o)=>(o=n!=null?u(p(n)):{},a(e||!n||!n.__esModule?r(o,\"default\",{value:n,enumerable:!0}):o,n)),T=n=>a(r({},\"__esModule\",{value:!0}),n);var d=g((H,h)=>{h.exports=_jsx_runtime});var M={};v(M,{default:()=>l});var t=w(d());function c(n){let e={code:\"code\",h2:\"h2\",p:\"p\",strong:\"strong\",...n.components},{InfoAlert:o}=e;return o||b(\"InfoAlert\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:`The errors tab is a powerful tool for debugging issues with your react code, namely invalid HTML.\nIt helps you detect potential HTML issues in your code, such as invalid HTML nesting or hydration issues.`}),`\n`,(0,t.jsx)(e.h2,{id:\"invalid-html\",children:\"Invalid HTML\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you have invalidely nested HTML (eg. a \",(0,t.jsx)(e.code,{children:\"div\"}),\" inside a \",(0,t.jsx)(e.code,{children:\"p\"}),`), you will see an error in the errors tab.\nThese kind of nesting issues can cause unexpected behavior in your application, namely hydration issues.\nThe browser does a lot of work to make sure that the HTML you send to the client is valid so it can\nsometimes move the order of elements around to make sure it's valid. This can cause unexpected hydration\nissues in your application.`]}),`\n`,(0,t.jsx)(e.p,{children:`Whenever there is a case of this found in your html the errors tab will show you the error and the file\nwhere the error is found. If the error is found in a file that is a part of your project you can click on the\nfile name to open the file in your editor and change the issue right away.`}),`\n`,(0,t.jsx)(e.h2,{id:\"hydration-mismatch\",children:\"Hydration Mismatch\"}),`\n`,(0,t.jsx)(e.p,{children:`Hydration mismatch is a common issue in React applications. It occurs when the server-rendered HTML does not match the\nHTML generated by the client. This can cause unexpected behavior in your application,\nsuch as the loss of user input or the loss of scroll position. In React Router it can also cause FOUC (Flash of Unstyled Content).`}),`\n`,(0,t.jsx)(e.p,{children:`To avoid hydration mismatch, you should make sure that the HTML generated by the server matches the HTML generated by\nthe client.`}),`\n`,(0,t.jsx)(e.p,{children:\"These kind of issues are very hard to track down because they can be caused by a lot of different things.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If a hydration mismatch happens the errors tab will show you the \",(0,t.jsx)(e.strong,{children:\"diff\"}),` between the server and client HTML, allowing\nyou to analyze the differences and fix the issue.`]}),`\n`,(0,t.jsx)(o,{children:(0,t.jsx)(e.p,{children:`Hydration mismatches happen on document requests (hard refresh or initial load in React Router). So if you don't see it at first\ntry refreshing your page.`})})]})}function l(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}function b(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return T(M);})();\n;return Component;"