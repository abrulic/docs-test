"var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var T=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!p.call(n,i)&&i!==r&&a(n,i,{get:()=>e[i],enumerable:!(o=v(e,i))||o.enumerable});return n};var w=(n,e,r)=>(r=n!=null?g(f(n)):{},c(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),b=n=>c(a({},\"__esModule\",{value:!0}),n);var d=T((k,s)=>{s.exports=_jsx_runtime});var x={};y(x,{default:()=>u});var t=w(d());function l(n){let e={code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...n.components},{InfoAlert:r,WarningAlert:o}=e;return r||h(\"InfoAlert\",!0),o||h(\"WarningAlert\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"devtools-extended-context\",children:\"Devtools extended context\"}),`\n`,(0,t.jsx)(e.p,{children:`The devtools context is a set of utilities that you can use in your data fetching functions to trace events\nin the network tab of react-router-devtools. You can also include them in your production builds if you do not want\nthe hassle of having to optionally check if they are defined.`}),`\n`,(0,t.jsx)(e.p,{children:\"The general usage of the devtools context is as follows:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`// The devTools object is available in all data fetching functions\nexport const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing.start(\"my-event\")\n  // do something here, eg DB call\n  tracing.end(\"my-event\", startTime!)\n  return \"data\"\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"You can also use the devtools context in your action functions:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`export const action = async ({ request, devTools }: ActionFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing?.start(\"my-event\")\n  // do something\n  tracing?.end(\"my-event\", startTime!)\n  return \"data\"\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"The devtools context is also available in your client loader and client action functions:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`export const clientLoader = async ({ request, devTools }: ClientLoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing?.start(\"my-event\")\n  // do something\n  tracing?.end(\"my-event\", startTime!)\n  return \"data\"\n}\n`})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`export const clientAction = async ({ request, devTools }: ClientActionFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing?.start(\"my-event\")\n  // do something\n  tracing?.end(\"my-event\", startTime!)\n  return \"data\"\n}\n`})}),`\n`,(0,t.jsxs)(r,{children:[(0,t.jsxs)(e.p,{children:[\"If you want to make the devTools available always in your project, you can set \",(0,t.jsx)(e.code,{children:\"includeInProd\"}),\" to \",(0,t.jsx)(e.code,{children:\"{ devTools: true }\"}),\" in your vite config.\"]}),(0,t.jsx)(e.p,{children:\"In production the trace calls won't do anything, but the tracing will be more convinient to use.\"}),(0,t.jsx)(e.p,{children:\"If you do so you can also override the types by adding the following to your project:\"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`import type { ExtendedContext } from \"react-router-devtools/context\";\n\n   declare module \"react-router\" {\n   \tinterface LoaderFunctionArgs {\n   \t\tdevTools: ExtendedContext\n   \t}\n   \tinterface ActionFunctionArgs {\n   \t\tdevTools: ExtendedContext\n   \t}\n   }\n`})})]}),`\n`,(0,t.jsx)(e.h2,{id:\"routeid\",children:\"RouteId\"}),`\n`,(0,t.jsx)(e.p,{children:\"The routeId is a string that is used to identify the route that is being processed. You can access it like so:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const routeId = devTools?.routeId;\n  // do something with the routeId\n  return \"data\"\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"tracing\",children:\"Tracing\"}),`\n`,(0,t.jsx)(e.p,{children:\"The tracing object contains all the utilities related to network tab tracing feature of react-router-devtools.\"}),`\n`,(0,t.jsx)(e.p,{children:\"There are three functions you can use:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"trace\"}),`\n`,(0,t.jsx)(e.li,{children:\"start\"}),`\n`,(0,t.jsx)(e.li,{children:\"end\"}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"trace\",children:\"trace\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"trace\"}),\" function is a function that will trace the event given to it, pipe it to the network tab of react-router-devtools and show you analytics.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"This works by calling the provided function and analyzing the time it takes to execute it.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // this will be traced in the network tab of react-router-devtools\n  const user = tracing?.trace(\"my-event\",() => getUser())\n\n\treturn { user }\n}\n`})}),`\n`,(0,t.jsx)(e.h4,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"name\"}),\" - The name of the event\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"event\"}),\" - The event to be traced\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{id:\"returns\",children:\"Returns\"}),`\n`,(0,t.jsx)(e.p,{children:\"The result of the event\"}),`\n`,(0,t.jsx)(e.h3,{id:\"start\",children:\"start\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"start\"}),` function is a function that will start a trace for the name provided to it and return the start time.\nThis is used together with `,(0,t.jsx)(e.code,{children:\"end\"}),\" to trace the time of the event.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`export const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // this will be traced in the network tab of react-router-devtools\n  const startTime = tracing?.start(\"my-event\")\n  // do something here, eg DB call\n\n\t// End the trace\n  tracing?.end(\"my-event\", startTime!)\n  return \"data\"\n}\n`})}),`\n`,(0,t.jsx)(o,{title:\"Warning\",children:(0,t.jsxs)(e.p,{children:[\"This function relies on you using the \",(0,t.jsx)(e.code,{children:\"end\"}),` with the same name as the start event, otherwise\nyou will end up having a never ending loading bar in the network tab!`]})}),`\n`,(0,t.jsx)(e.h4,{id:\"parameters-1\",children:\"Parameters\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"name\"}),\" - The name of the event\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{id:\"returns-1\",children:\"Returns\"}),`\n`,(0,t.jsx)(e.p,{children:\"The start time of the event\"}),`\n`,(0,t.jsx)(e.h3,{id:\"end\",children:\"end\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"end\"}),\" function is a function that will end a trace for the name provided to it and return the end time.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`export const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // this will be traced in the network tab of react-router-devtools\n  const startTime = tracing?.start(\"get user\")\n  // do something here, eg DB call\n\tconst user = await getUser();\n\t// End the trace\n  tracing?.end(\"get user\", startTime!, { user })\n  return \"data\"\n\n}\n`})}),`\n`,(0,t.jsx)(e.h4,{id:\"parameters-2\",children:\"Parameters\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"name\"}),\" - The name of the event\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"startTime\"}),\" - The start time of the sendEvent\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"data\"}),\" - The data to be sent with the event\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{id:\"returns-2\",children:\"Returns\"}),`\n`,(0,t.jsx)(e.p,{children:\"The data provided in the last parameter\"})]})}function u(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}function h(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return b(x);})();\n;return Component;"