export default [
	{
		title: "Quick Start",
		summary: "React Router Devtools is a set of tools that help you to develop your React Router application.",
		description: "React Router Devtools is a set of tools that help you to develop your React Router application.",
		content:
			'var Component=(()=>{var u=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var v=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),w=(r,e)=>{for(var o in e)i(r,o,{get:e[o],enumerable:!0})},c=(r,e,o,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of p(e))!m.call(r,t)&&t!==o&&i(r,t,{get:()=>e[t],enumerable:!(s=g(e,t))||s.enumerable});return r};var b=(r,e,o)=>(o=r!=null?u(y(r)):{},c(e||!r||!r.__esModule?i(o,"default",{value:r,enumerable:!0}):o,r)),f=r=>c(i({},"__esModule",{value:!0}),r);var l=v((j,d)=>{d.exports=_jsx_runtime});var x={};w(x,{default:()=>h});var n=b(l());function a(r){let e={code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:["This documentation covers everything you need to know to get started with ",(0,n.jsx)(e.code,{children:"react-router-devtools"}),"."]}),`\n`,(0,n.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:["React Router version ",(0,n.jsx)(e.strong,{children:"7.0"})," or higher."]}),`\n`,(0,n.jsxs)(e.li,{children:["Your project needs to run on ",(0,n.jsx)(e.strong,{children:"ESM"}),". If you are using CommonJS, you will need to convert your project to ESM."]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:"why-esm",children:"Why ESM?"}),`\n`,(0,n.jsxs)(e.p,{children:["In order to use the full feature-set of ",(0,n.jsx)(e.strong,{children:"Vite"}),` the project has to run on ESM. This is because Vite exposes a websocket\nthat `,(0,n.jsx)(e.strong,{children:"react-router-devtools"})," uses to communicate with the server. This websocket is ",(0,n.jsx)(e.strong,{children:"only"}),` available in ESM projects\nbecause it\'s exposed by `,(0,n.jsx)(e.code,{children:"import.meta"})," which is only available in ESM."]}),`\n`,(0,n.jsx)(e.p,{children:"To avoid creating user confusion and giving you a subpar experience, we have decided to only support ESM projects running on Vite."}),`\n`,(0,n.jsxs)(e.h2,{id:"why-use-react-router-devtools",children:["Why use ",(0,n.jsx)(e.code,{children:"react-router-devtools"}),"?"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:"react-router-devtools"})," is a set of tools that help you to develop your React Router application."]}),`\n`,(0,n.jsx)(e.p,{children:"They help you, but are not limited to, to do the following things:"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"Loader data display"})," - You can see the data that is being loaded by your loaders."]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"Route display"})," - You can see the routes that are being used by your application in list/tree format."]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"Error tracking"})," - You can see invalid HTML rendered on your page and where it\'s coming from."]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"Hydration mismatch tracking"})," - You can see if there are any hydration mismatches in your application, what was rendered on the client and what was rendered on the server."]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"Server logs"})," - You can see the logs of your server in the browser."]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"Route boundaries"})," - You can see the route boundaries by hovering over elements."]}),`\n`]})]})}function h(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(a,{...r})}):a(r)}return f(x);})();\n;return Component;',
		_meta: {
			filePath: "_index.mdx",
			fileName: "_index.mdx",
			directory: ".",
			extension: "mdx",
			path: "_index",
		},
		slug: "_index",
		section: undefined,
		rawMdx:
			"This documentation covers everything you need to know to get started with `react-router-devtools`.\n\n## Prerequisites\n\n- React Router version **7.0** or higher.\n- Your project needs to run on **ESM**. If you are using CommonJS, you will need to convert your project to ESM.\n\n## Why ESM?\n\nIn order to use the full feature-set of **Vite** the project has to run on ESM. This is because Vite exposes a websocket\nthat **react-router-devtools** uses to communicate with the server. This websocket is **only** available in ESM projects\nbecause it's exposed by `import.meta` which is only available in ESM.\n\nTo avoid creating user confusion and giving you a subpar experience, we have decided to only support ESM projects running on Vite.\n\n\n## Why use `react-router-devtools`?\n\n`react-router-devtools` is a set of tools that help you to develop your React Router application.\n\nThey help you, but are not limited to, to do the following things:\n- **Loader data display** - You can see the data that is being loaded by your loaders.\n- **Route display** - You can see the routes that are being used by your application in list/tree format.\n- **Error tracking** - You can see invalid HTML rendered on your page and where it's coming from.\n- **Hydration mismatch tracking** - You can see if there are any hydration mismatches in your application, what was rendered on the client and what was rendered on the server.\n- **Server logs** - You can see the logs of your server in the browser.\n- **Route boundaries** - You can see the route boundaries by hovering over elements.",
	},
	{
		title: "Setting up React Router Devtools",
		summary: "Beginner's Guide",
		description: "Follow this page to learn how to set up React Router Devtools in your React Router project.",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var u=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var o in e)i(t,o,{get:e[o],enumerable:!0})},c=(t,e,o,l)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of f(e))!m.call(t,r)&&r!==o&&i(t,r,{get:()=>e[r],enumerable:!(l=p(e,r))||l.enumerable});return t};var R=(t,e,o)=>(o=t!=null?u(g(t)):{},c(e||!t||!t.__esModule?i(o,"default",{value:t,enumerable:!0}):o,t)),x=t=>c(i({},"__esModule",{value:!0}),t);var a=y((D,s)=>{s.exports=_jsx_runtime});var j={};v(j,{default:()=>h});var n=R(a());function d(t){let e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...t.components},{WarningAlert:o}=e;return o||b("WarningAlert",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{id:"installation",children:"Installation"}),`\n`,(0,n.jsx)(e.p,{children:"Adding React Router Devtools to your project is easy. First install it into your project by running:"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-bash",children:`npm install react-router-devtools -D\n`})}),`\n`,(0,n.jsx)(e.p,{children:"This will install it as a dev dependency in your project."}),`\n`,(0,n.jsx)(e.h2,{id:"enabling-the-tools",children:"Enabling the tools"}),`\n`,(0,n.jsxs)(e.p,{children:["After you have installed the tools, you need to go to your ",(0,n.jsx)(e.code,{children:"vite.config.ts"})," file which will probably look something like this:"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:`import { reactRouter } from \'@react-router/dev/vite\'\nimport { defineConfig } from \'vite\'\nimport tsconfigPaths from \'vite-tsconfig-paths\'\n\nexport default defineConfig({\n  plugins: [reactRouter(), tsconfigPaths()],\n})\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:["All you have to do is add the plugin into the ",(0,n.jsx)(e.code,{children:"plugins"})," array in your ",(0,n.jsx)(e.code,{children:"vite.config.ts"})," file."]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-diff",children:`import { reactRouter } from \'@react-router/dev/vite\'\nimport { defineConfig } from \'vite\'\nimport tsconfigPaths from \'vite-tsconfig-paths\'\n+ import { reactRouterDevTools } from "react-router-devtools";\n\nexport default defineConfig({\n-  plugins: [reactRouter(), tsconfigPaths()],\n+  plugins: [reactRouterDevTools(), reactRouter(), tsconfigPaths()],\n})\n\n`})}),`\n`,(0,n.jsx)(o,{title:"Warning",children:(0,n.jsx)(e.p,{children:"Make sure your plugin is BEFORE the react router one!"})}),`\n`,(0,n.jsx)(e.h3,{id:"cloudflare",children:"CloudFlare"}),`\n`,(0,n.jsxs)(e.p,{children:["If you\'re trying to spin it up on CF, try adding this to your ",(0,n.jsx)(e.code,{children:"optimizeDeps"})," in your ",(0,n.jsx)(e.code,{children:"vite.config.js"})," file:"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:`optimizeDeps: {\n  include: [\n    // other optimized deps\n    "beautify",\n    "react-diff-viewer-continued",\n    "classnames",\n    "@bkrem/react-transition-group",\n  ],\n},\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"That\'s it!"})}),`\n`,(0,n.jsx)(e.p,{children:"You should now see the React Router Devtools in your browser when you run your app."})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}function b(t,e){throw new Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}return x(j);})();\n;return Component;',
		_meta: {
			filePath: "01-started/01-installation.mdx",
			fileName: "01-installation.mdx",
			directory: "01-started",
			extension: "mdx",
			path: "01-started/01-installation",
		},
		slug: "started/installation",
		section: "01-started",
		rawMdx:
			"## Installation\nAdding React Router Devtools to your project is easy. First install it into your project by running:\n\n```bash\nnpm install react-router-devtools -D\n```\n\nThis will install it as a dev dependency in your project.\n\n## Enabling the tools\n\nAfter you have installed the tools, you need to go to your `vite.config.ts` file which will probably look something like this:\n\n```ts\nimport { reactRouter } from '@react-router/dev/vite'\nimport { defineConfig } from 'vite'\nimport tsconfigPaths from 'vite-tsconfig-paths'\n\nexport default defineConfig({\n  plugins: [reactRouter(), tsconfigPaths()],\n})\n\n```\n\nAll you have to do is add the plugin into the `plugins` array in your `vite.config.ts` file.\n\n```diff\nimport { reactRouter } from '@react-router/dev/vite'\nimport { defineConfig } from 'vite'\nimport tsconfigPaths from 'vite-tsconfig-paths'\n+ import { reactRouterDevTools } from \"react-router-devtools\";\n\nexport default defineConfig({\n-  plugins: [reactRouter(), tsconfigPaths()],\n+  plugins: [reactRouterDevTools(), reactRouter(), tsconfigPaths()],\n})\n\n```\n<WarningAlert title=\"Warning\">\nMake sure your plugin is BEFORE the react router one!\n</WarningAlert>\n\n### CloudFlare\n\nIf you're trying to spin it up on CF, try adding this to your `optimizeDeps` in your `vite.config.js` file:\n```ts\noptimizeDeps: {\n  include: [\n    // other optimized deps\n    \"beautify\",\n    \"react-diff-viewer-continued\",\n    \"classnames\",\n    \"@bkrem/react-transition-group\",\n  ],\n},\n```\n\n**That's it!**\n\nYou should now see the React Router Devtools in your browser when you run your app.",
	},
	{
		title: "React Router Devtools General Configuration",
		summary: "Beginner's Guide",
		description: "General Configuration options for the React Router Devtools to interface with your editor",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var u=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var v=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),m=(o,e)=>{for(var t in e)i(o,t,{get:e[t],enumerable:!0})},c=(o,e,t,d)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of f(e))!y.call(o,r)&&r!==t&&i(o,r,{get:()=>e[r],enumerable:!(d=p(e,r))||d.enumerable});return o};var w=(o,e,t)=>(t=o!=null?u(g(o)):{},c(e||!o||!o.__esModule?i(t,"default",{value:o,enumerable:!0}):t,o)),b=o=>c(i({},"__esModule",{value:!0}),o);var s=v((_,l)=>{l.exports=_jsx_runtime});var j={};m(j,{default:()=>h});var n=w(s());function a(o){let e={code:"code",h2:"h2",p:"p",pre:"pre",...o.components},{WarningAlert:t}=e;return t||x("WarningAlert",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:"This covers the general configuration options for the React Router Devtools."}),`\n`,(0,n.jsx)(e.h2,{id:"general-config",children:"General Config"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:`type GeneralConfig = {\n \tpluginDir?: string\n\tincludeInProd?: {\n\t\tclient?: boolean\n\t\tserver?: boolean\n\t}\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:"plugindir",children:(0,n.jsx)(e.code,{children:"pluginDir"})}),`\n`,(0,n.jsx)(e.p,{children:`The relative path to your plugin directory. If you have a directory for react-router-devtools plugins you can point to it and they\nwill be automatically imported and added to the dev tools.`}),`\n`,(0,n.jsx)(e.h2,{id:"includeinprod",children:(0,n.jsx)(e.code,{children:"includeInProd"})}),`\n`,(0,n.jsx)(e.p,{children:"This option is used to set whether the plugin should be included in production builds or not."}),`\n`,(0,n.jsxs)(e.p,{children:["By default it is set to ",(0,n.jsx)(e.code,{children:"undefined"})," and if you set this option to an object with the ",(0,n.jsx)(e.code,{children:"client"}),", ",(0,n.jsx)(e.code,{children:"context"})," and ",(0,n.jsx)(e.code,{children:"server"})," properties set to ",(0,n.jsx)(e.code,{children:"true"})," the plugin will be included in production builds."]}),`\n`,(0,n.jsx)(e.p,{children:`The client part includes the dev tools with the plugin and the server part includes the info logs. You can granularly configure the\nexact behavior of both sides with client and server configs respectively.`}),`\n`,(0,n.jsxs)(e.p,{children:["Each of these flags will include a part of the plugin in production, in order for any of these to work ",(0,n.jsx)(e.code,{children:"react-router-devtools"}),` need to be switched over to\na regular dependency and included in your project. If you only want to include the `,(0,n.jsx)(e.code,{children:"devTools"}),` helper in production, for example, you can\nset `,(0,n.jsx)(e.code,{children:"includeInProd"})," to ",(0,n.jsx)(e.code,{children:"{ devTools: true }"})," and the ",(0,n.jsx)(e.code,{children:"devTools"})," part will be included in production and available always."]}),`\n`,(0,n.jsxs)(t,{title:"Be careful!",children:[(0,n.jsx)(e.p,{children:`If you decide to deploy parts to production you should be very careful that you don\'t expose the dev tools to your clients or anybody\nwho is not supposed to see them. Also the server part uses chalk which might not work in non-node environments!`}),(0,n.jsxs)(e.p,{children:["Also, if you wish to edit the plugin server config in production you can set ",(0,n.jsx)(e.code,{children:"process.rdt_config"}),` to an object with the same shape as the\nconfig object and it will be used instead of the default production config (`,(0,n.jsx)(e.code,{children:"{ silent: true }"}),")."]})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:`import { reactRouterDevTools } from "react-router-devtools";\n\nexport default defineConfig({\n  plugins: [\n    reactRouterDevTools({\n      includeInProd: {\n        client: true,\n        server: true,\n        devTools: true\n      },\n    }),\n  ],\n});\n`})})]})}function h(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,{...o,children:(0,n.jsx)(a,{...o})}):a(o)}function x(o,e){throw new Error("Expected "+(e?"component":"object")+" `"+o+"` to be defined: you likely forgot to import, pass, or provide it.")}return b(j);})();\n;return Component;',
		_meta: {
			filePath: "02-configuration/01-general.mdx",
			fileName: "01-general.mdx",
			directory: "02-configuration",
			extension: "mdx",
			path: "02-configuration/01-general",
		},
		slug: "configuration/general",
		section: "02-configuration",
		rawMdx:
			'This covers the general configuration options for the React Router Devtools.\n\n## General Config\n\n```ts\ntype GeneralConfig = {\n \tpluginDir?: string\n\tincludeInProd?: {\n\t\tclient?: boolean\n\t\tserver?: boolean\n\t}\n}\n```\n\n## `pluginDir`\n\nThe relative path to your plugin directory. If you have a directory for react-router-devtools plugins you can point to it and they\nwill be automatically imported and added to the dev tools.\n\n## `includeInProd`\n\nThis option is used to set whether the plugin should be included in production builds or not.\n\nBy default it is set to `undefined` and if you set this option to an object with the `client`, `context` and `server` properties set to `true` the plugin will be included in production builds.\n\nThe client part includes the dev tools with the plugin and the server part includes the info logs. You can granularly configure the\nexact behavior of both sides with client and server configs respectively.\n\n\nEach of these flags will include a part of the plugin in production, in order for any of these to work `react-router-devtools` need to be switched over to\na regular dependency and included in your project. If you only want to include the `devTools` helper in production, for example, you can\nset `includeInProd` to `{ devTools: true }` and the `devTools` part will be included in production and available always.\n\n<WarningAlert title="Be careful!">\n If you decide to deploy parts to production you should be very careful that you don\'t expose the dev tools to your clients or anybody\n who is not supposed to see them. Also the server part uses chalk which might not work in non-node environments!\n\n Also, if you wish to edit the plugin server config in production you can set `process.rdt_config` to an object with the same shape as the\n config object and it will be used instead of the default production config (`{ silent: true }`).\n</WarningAlert>\n\n  ```ts\n  import { reactRouterDevTools } from "react-router-devtools";\n\n  export default defineConfig({\n    plugins: [\n      reactRouterDevTools({\n        includeInProd: {\n          client: true,\n          server: true,\n          devTools: true\n        },\n      }),\n    ],\n  });\n  ```',
	},
	{
		title: "React Router Devtools Client Configuration",
		summary: "Beginner's Guide",
		description: "Configuration options for the React Router Devtools client",
		lastUpdated: "2025-08-01",
		author: "abrulic1",
		content:
			'var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var i in e)r(n,i,{get:e[i],enumerable:!0})},h=(n,e,i,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let l of f(e))!b.call(n,l)&&l!==i&&r(n,l,{get:()=>e[l],enumerable:!(o=g(e,l))||o.enumerable});return n};var w=(n,e,i)=>(i=n!=null?p(m(n)):{},h(e||!n||!n.__esModule?r(i,"default",{value:n,enumerable:!0}):i,n)),x=n=>h(r({},"__esModule",{value:!0}),n);var a=y((R,d)=>{d.exports=_jsx_runtime});var T={};v(T,{default:()=>u});var t=w(a());function s(n){let e={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...n.components},{InfoAlert:i,WarningAlert:o}=e;return i||c("InfoAlert",!0),o||c("WarningAlert",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i,{children:(0,t.jsxs)(e.p,{children:["All of the following options can be set in the dev tools panel ",(0,t.jsx)(e.strong,{children:\'"Settings page"\'}),` and they override the default ones. Your preferences are\nstored in localStorage and if they do not exist there the default ones are used.`]})}),`\n`,(0,t.jsx)(e.p,{children:"Before explaining all the possible options here is the client configuration Typescript type:"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`type RdtClientConfig = {\n    position: "top-left" | "top-right" | "bottom-left" | "bottom-right" | "middle-left" | "middle-right";\n    liveUrls: { name: string, url: string }[];\n    liveUrlsPosition: "top-left" | "top-right" | "bottom-left" | "bottom-right";\n    defaultOpen: boolean;\n    expansionLevel: number;\n    height: number;\n    minHeight: number;\n    maxHeight: number;\n    hideUntilHover: boolean;\n    panelLocation: "top" | "bottom";\n    requireUrlFlag: boolean;\n    urlFlag: string;\n    breakpoints: {name: string, min: number, max: number }[],\n    routeBoundaryGradient: "sea" | "hyper" | "gotham" | "gray" | "watermelon" | "ice" | "silver";\n    showBreakpointIndicator: boolean;\n    showRouteBoundariesOn: "hover" | "click";\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:"Let\'s go through each option and see what it does."}),`\n`,(0,t.jsx)(e.h2,{id:"live-urls",children:"Live URLs"}),`\n`,(0,t.jsx)(e.p,{children:`This option is used to set the live urls that will be displayed in the bottom left corner of the screen. The default value is an empty array.\nIt allows you to specify multiple live urls that you can use to open the current page in a new tab.`}),`\n`,(0,t.jsx)(e.h2,{id:"live-urls-position",children:"Live URLs position"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the position of the live urls that will be displayed in the bottom left corner of the screen. The possible values are:"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"top-left"})," - the live urls will be positioned at the top left corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"top-right"})," - the live urls will be positioned at the top right corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"bottom-left"})," - the live urls will be positioned at the bottom left corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"bottom-right"})," - the live urls will be positioned at the bottom right corner of the screen"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:"position",children:"Position"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the position of the React Router Devtools trigger (the button that opens the panel). The possible values are:"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"top-left"})," - the trigger will be positioned at the top left corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"top-right"})," - the trigger will be positioned at the top right corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"bottom-left"})," - the trigger will be positioned at the bottom left corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"bottom-right"})," - the trigger will be positioned at the bottom right corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"middle-left"})," - the trigger will be positioned at the middle left of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"middle-right"})," - the trigger will be positioned at the middle right of the screen"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:"default-open",children:"Default Open"}),`\n`,(0,t.jsxs)(e.p,{children:["This option is used to set the initial state of the panel. If set to ",(0,t.jsx)(e.code,{children:"true"})," the panel will be open by default, if set to ",(0,t.jsx)(e.code,{children:"false"}),`\nthe panel will be closed by default.`]}),`\n`,(0,t.jsx)(e.h2,{id:"expansion-level",children:"Expansion Level"}),`\n`,(0,t.jsxs)(e.p,{children:["This option is used to set the initial expansion level of the returned JSON data in the ",(0,t.jsx)(e.strong,{children:"Active Page"}),` tab. By default it is set to\n1 and if you open up the `,(0,t.jsx)(e.strong,{children:"Active Page"})," and look at the returned loader data it will look like this:"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`"data": { ... } +\n`})}),`\n`,(0,t.jsx)(e.p,{children:"If you set the expansion level to 1 the returned loader data will look like this:"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`"data": {\n    "property": "value"\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:"height",children:"Height"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the initial height of the panel. The default value is 400px."}),`\n`,(0,t.jsx)(e.h2,{id:"min-height",children:"Min Height"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the minimum height of the panel. The default value is 200px."}),`\n`,(0,t.jsx)(e.h2,{id:"max-height",children:"Max Height"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the maximum height of the panel. The default value is 800px."}),`\n`,(0,t.jsx)(e.h2,{id:"hide-until-hover",children:"Hide Until Hover"}),`\n`,(0,t.jsxs)(e.p,{children:["This option is used to set whether the trigger should be hidden until you hover over it. The default value is ",(0,t.jsx)(e.code,{children:"false"}),"."]}),`\n`,(0,t.jsx)(e.h2,{id:"panel-location",children:"Panel Location"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the location of the panel. The possible values are:"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"top"})," - the panel will be positioned at the top of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"bottom"})," - the panel will be positioned at the bottom of the screen"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:"require-url-flag",children:"Require URL Flag"}),`\n`,(0,t.jsxs)(e.p,{children:["This option is used to set whether the panel should be opened only if the URL contains a specific flag. The default value is ",(0,t.jsx)(e.code,{children:"false"}),"."]}),`\n`,(0,t.jsxs)(o,{title:"Be careful!",children:[(0,t.jsxs)(e.p,{children:["If you set this option to ",(0,t.jsx)(e.code,{children:"true"}),` and you forget to set the URL flag, the panel will hide and you will not be able to see it\nuntil you enter the url flag.`]}),(0,t.jsxs)(e.p,{children:["The default one is ",(0,t.jsx)(e.code,{children:"rdt=true"})," and if you set this option to ",(0,t.jsx)(e.code,{children:"true"})," you will have to add ",(0,t.jsx)(e.code,{children:"?rdt=true"})," to the URL in order to see the panel."]})]}),`\n`,(0,t.jsx)(e.h2,{id:"url-flag",children:"URL Flag"}),`\n`,(0,t.jsxs)(e.p,{children:["This option is used to set the URL flag that is required to open the panel. The default value is ",(0,t.jsx)(e.code,{children:"rdt"}),"."]}),`\n`,(0,t.jsxs)(e.p,{children:["You can set it to whatever you wish and if you set the ",(0,t.jsx)(e.strong,{children:"Require URL Flag"})," option to ",(0,t.jsx)(e.code,{children:"true"})," you will have to add ",(0,t.jsx)(e.code,{children:"?yourFlag=true"})," to the URL in order to see the panel."]}),`\n`,(0,t.jsx)(e.h2,{id:"route-boundary-gradient",children:"Route Boundary Gradient"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the color of the route boundary gradient. The possible values are:"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"sea"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"hyper"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"gotham"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"gray"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"watermelon"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"ice"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"silver"})}),`\n`]}),`\n`,(0,t.jsx)(i,{children:(0,t.jsxs)(e.p,{children:["This changes the color of the route boundary gradient in the ",(0,t.jsx)(e.strong,{children:"Active Page"})," tab. When you hover over any route in the panel it will show you it\'s boundaries."]})}),`\n`,(0,t.jsxs)(e.p,{children:["The default value is ",(0,t.jsx)(e.code,{children:"ice"}),"."]}),`\n`,(0,t.jsx)(e.h2,{id:"breakpoints",children:"Breakpoints"}),`\n`,(0,t.jsx)(e.p,{children:`This option allows you to define custom breakpoints that show in the bottom left corner of the panel to help you determine the current screen breakpoint you have defined.\nBy default the breakpoints are set to tailwind breakpoints but you can change them to whatever you want.`}),`\n`,(0,t.jsx)(e.p,{children:"Eg:"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`    breakpoints: [{name: "lg", min: 0, max: 768}, {name: "xl", min: 768, max: 1024}, {name: "2xl", min: 1024, max: Infinity}],\n`})}),`\n`,(0,t.jsx)(e.h2,{id:"show-breakpoint-indicator",children:"Show breakpoint indicator"}),`\n`,(0,t.jsx)(e.p,{children:"This option allows you to show/hide the current breakpoint in the bottom left corner of the panel."}),`\n`,(0,t.jsx)(e.h2,{id:"show-route-boundaries-on",children:"Show route boundaries on"}),`\n`,(0,t.jsx)(e.p,{children:`This option allows you to either show route boundaries when you hover a route segment on the pages tab or\nit shows a dedicated button called "Show Route Boundary" that shows the route boundary for that route on click.`}),`\n`,(0,t.jsxs)(e.p,{children:["Default value is ",(0,t.jsx)(e.code,{children:"click"}),";"]}),`\n`,(0,t.jsx)(e.h2,{id:"creating-a-custom-configuration",children:"Creating a custom configuration"}),`\n`,(0,t.jsx)(e.p,{children:"To create a custom configuration you can use the following code snippet:"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`import { defineRdtConfig } from "react-router-devtools";\n\nconst customConfig = defineRdtConfig({\n  client: {\n    position: "top-right",\n    defaultOpen: true,\n    expansionLevel: 1,\n    height: 500,\n    minHeight: 300,\n    maxHeight: 1000,\n    hideUntilHover: true,\n    panelLocation: "bottom",\n    requireUrlFlag: true,\n    urlFlag: "customFlag",\n    routeBoundaryGradient: "gotham",\n    breakpoints: [{name: "lg", min: 0, max: 768}, {name: "xl", min: 768, max: 1024}, {name: "2xl", min: 1024, max: Infinity}],\n    showBreakpointIndicator: false\n  }\n});\n\nexport default customConfig;\n`})}),`\n`,(0,t.jsxs)(e.p,{children:["Then you can use this configuration in your ",(0,t.jsx)(e.code,{children:"vite.config.js"})," file like this:"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`import customConfig from "./rdt.config";\nimport { reactRouterDevTools } from "react-router-devtools";\n\nexport default defineConfig({\n  plugins: [reactRouterDevTools(customConfig)],\n});\n`})}),`\n`,(0,t.jsx)(i,{title:"Try it out!",children:(0,t.jsx)(e.p,{children:"Try opening up the dev tools panel deployed on this site and playing around with the settings in the settings tab!"})})]})}function u(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(s,{...n})}):s(n)}function c(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}return x(T);})();\n;return Component;',
		_meta: {
			filePath: "02-configuration/02-client.mdx",
			fileName: "02-client.mdx",
			directory: "02-configuration",
			extension: "mdx",
			path: "02-configuration/02-client",
		},
		slug: "configuration/client",
		section: "02-configuration",
		rawMdx:
			'<InfoAlert>\nAll of the following options can be set in the dev tools panel **"Settings page"** and they override the default ones. Your preferences are\nstored in localStorage and if they do not exist there the default ones are used.\n</InfoAlert>\n\nBefore explaining all the possible options here is the client configuration Typescript type:\n\n```ts\ntype RdtClientConfig = {\n    position: "top-left" | "top-right" | "bottom-left" | "bottom-right" | "middle-left" | "middle-right";\n    liveUrls: { name: string, url: string }[];\n    liveUrlsPosition: "top-left" | "top-right" | "bottom-left" | "bottom-right";\n    defaultOpen: boolean;\n    expansionLevel: number;\n    height: number;\n    minHeight: number;\n    maxHeight: number;\n    hideUntilHover: boolean;\n    panelLocation: "top" | "bottom";\n    requireUrlFlag: boolean;\n    urlFlag: string;\n    breakpoints: {name: string, min: number, max: number }[],\n    routeBoundaryGradient: "sea" | "hyper" | "gotham" | "gray" | "watermelon" | "ice" | "silver";\n    showBreakpointIndicator: boolean;\n    showRouteBoundariesOn: "hover" | "click";\n}\n```\n\nLet\'s go through each option and see what it does.\n\n## Live URLs\n\nThis option is used to set the live urls that will be displayed in the bottom left corner of the screen. The default value is an empty array.\nIt allows you to specify multiple live urls that you can use to open the current page in a new tab.\n\n## Live URLs position\n\nThis option is used to set the position of the live urls that will be displayed in the bottom left corner of the screen. The possible values are:\n- `top-left` - the live urls will be positioned at the top left corner of the screen\n- `top-right` - the live urls will be positioned at the top right corner of the screen\n- `bottom-left` - the live urls will be positioned at the bottom left corner of the screen\n- `bottom-right` - the live urls will be positioned at the bottom right corner of the screen\n\n## Position\n\nThis option is used to set the position of the React Router Devtools trigger (the button that opens the panel). The possible values are:\n- `top-left` - the trigger will be positioned at the top left corner of the screen\n- `top-right` - the trigger will be positioned at the top right corner of the screen\n- `bottom-left` - the trigger will be positioned at the bottom left corner of the screen\n- `bottom-right` - the trigger will be positioned at the bottom right corner of the screen\n- `middle-left` - the trigger will be positioned at the middle left of the screen\n- `middle-right` - the trigger will be positioned at the middle right of the screen\n\n## Default Open\n\nThis option is used to set the initial state of the panel. If set to `true` the panel will be open by default, if set to `false`\nthe panel will be closed by default.\n\n## Expansion Level\n\nThis option is used to set the initial expansion level of the returned JSON data in the **Active Page** tab. By default it is set to\n1 and if you open up the **Active Page** and look at the returned loader data it will look like this:\n\n```ts\n"data": { ... } +\n```\n\nIf you set the expansion level to 1 the returned loader data will look like this:\n\n```ts\n"data": {\n    "property": "value"\n}\n```\n\n## Height\n\nThis option is used to set the initial height of the panel. The default value is 400px.\n\n## Min Height\n\nThis option is used to set the minimum height of the panel. The default value is 200px.\n\n## Max Height\n\nThis option is used to set the maximum height of the panel. The default value is 800px.\n\n## Hide Until Hover\n\nThis option is used to set whether the trigger should be hidden until you hover over it. The default value is `false`.\n\n## Panel Location\n\nThis option is used to set the location of the panel. The possible values are:\n- `top` - the panel will be positioned at the top of the screen\n- `bottom` - the panel will be positioned at the bottom of the screen\n\n## Require URL Flag\n\nThis option is used to set whether the panel should be opened only if the URL contains a specific flag. The default value is `false`.\n\n<WarningAlert title="Be careful!">\nIf you set this option to `true` and you forget to set the URL flag, the panel will hide and you will not be able to see it\nuntil you enter the url flag.\n\nThe default one is `rdt=true` and if you set this option to `true` you will have to add `?rdt=true` to the URL in order to see the panel.\n</WarningAlert>\n\n## URL Flag\n\nThis option is used to set the URL flag that is required to open the panel. The default value is `rdt`.\n\nYou can set it to whatever you wish and if you set the **Require URL Flag** option to `true` you will have to add `?yourFlag=true` to the URL in order to see the panel.\n\n## Route Boundary Gradient\n\nThis option is used to set the color of the route boundary gradient. The possible values are:\n- `sea`\n- `hyper`\n- `gotham`\n- `gray`\n- `watermelon`\n- `ice`\n- `silver`\n\n<InfoAlert>\nThis changes the color of the route boundary gradient in the **Active Page** tab. When you hover over any route in the panel it will show you it\'s boundaries.\n</InfoAlert>\n\nThe default value is `ice`.\n\n## Breakpoints\n\nThis option allows you to define custom breakpoints that show in the bottom left corner of the panel to help you determine the current screen breakpoint you have defined.\nBy default the breakpoints are set to tailwind breakpoints but you can change them to whatever you want.\n\nEg:\n```ts\n    breakpoints: [{name: "lg", min: 0, max: 768}, {name: "xl", min: 768, max: 1024}, {name: "2xl", min: 1024, max: Infinity}],\n```\n\n## Show breakpoint indicator\n\nThis option allows you to show/hide the current breakpoint in the bottom left corner of the panel.\n\n## Show route boundaries on\n\nThis option allows you to either show route boundaries when you hover a route segment on the pages tab or\nit shows a dedicated button called "Show Route Boundary" that shows the route boundary for that route on click.\n\nDefault value is `click`;\n\n## Creating a custom configuration\n\nTo create a custom configuration you can use the following code snippet:\n\n  ```ts\n  import { defineRdtConfig } from "react-router-devtools";\n\n  const customConfig = defineRdtConfig({\n    client: {\n      position: "top-right",\n      defaultOpen: true,\n      expansionLevel: 1,\n      height: 500,\n      minHeight: 300,\n      maxHeight: 1000,\n      hideUntilHover: true,\n      panelLocation: "bottom",\n      requireUrlFlag: true,\n      urlFlag: "customFlag",\n      routeBoundaryGradient: "gotham",\n      breakpoints: [{name: "lg", min: 0, max: 768}, {name: "xl", min: 768, max: 1024}, {name: "2xl", min: 1024, max: Infinity}],\n      showBreakpointIndicator: false\n    }\n  });\n\n  export default customConfig;\n  ```\n\nThen you can use this configuration in your `vite.config.js` file like this:\n\n```ts\nimport customConfig from "./rdt.config";\nimport { reactRouterDevTools } from "react-router-devtools";\n\nexport default defineConfig({\n  plugins: [reactRouterDevTools(customConfig)],\n});\n```\n\n<InfoAlert title="Try it out!">\n  Try opening up the dev tools panel deployed on this site and playing around with the settings in the settings tab!\n</InfoAlert>',
	},
	{
		title: "React Router Devtools Editor Configuration",
		summary: "Beginner's Guide",
		description: "Configuration options for the React Router Devtools to interface with your editor",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),w=(o,e)=>{for(var t in e)i(o,t,{get:e[t],enumerable:!0})},c=(o,e,t,d)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of m(e))!g.call(o,r)&&r!==t&&i(o,r,{get:()=>e[r],enumerable:!(d=u(e,r))||d.enumerable});return o};var x=(o,e,t)=>(t=o!=null?p(f(o)):{},c(e||!o||!o.__esModule?i(t,"default",{value:o,enumerable:!0}):t,o)),N=o=>c(i({},"__esModule",{value:!0}),o);var h=b((_,l)=>{l.exports=_jsx_runtime});var y={};w(y,{default:()=>a});var n=x(h());function s(o){let e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...o.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:"Everyone uses their own editors, so it\'s important to be able to configure the editor that React Router Devtools will open your files in."}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:`type EditorConfig = {\n  name: string;\n  open(path: string, lineNumber: string | undefined): void;\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:"name",children:(0,n.jsx)(e.code,{children:"name"})}),`\n`,(0,n.jsx)(e.p,{children:"The name of the editor that will be displayed on the Open in Editor button."}),`\n`,(0,n.jsx)(e.h2,{id:"open",children:(0,n.jsx)(e.code,{children:"open"})}),`\n`,(0,n.jsx)(e.p,{children:`This function will be called when the user clicks the Open in Editor button. It will receive the path to the file and the line number to open the file at.\nThis function will both handle the case where you shift + right click an element on the page AND the open in X button in the UI, they return different values\nso be sure to cover both of them.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:\'import { exec } from "node:child_process";\\nimport { normalizePath } from "vite";\\n\\nfunction open(path: string, lineNumber: string | undefined) {\\n  exec(`code -g "${normalizePath(path)}${lineNumber ? `:${lineNumber}` : ""}"`);\\n}\\n\'})}),`\n`,(0,n.jsx)(e.h2,{id:"editors",children:"Editors"}),`\n`,(0,n.jsx)(e.p,{children:"Below are some examples of configurations for popular editors."}),`\n`,(0,n.jsx)(e.h3,{id:"vs-code",children:"VS Code"}),`\n`,(0,n.jsx)(e.p,{children:"To use VS Code as your editor, you don\'t need to do anything, it\'s the default editor."}),`\n`,(0,n.jsx)(e.h3,{id:"webstorm",children:"WebStorm"}),`\n`,(0,n.jsx)(e.p,{children:"To use WebStorm as your editor, you can use the following configuration:"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:`import { exec } from "node:child_process";\nimport { cwd } from "node:process";\n\nconst editor = {\n  name: "WebStorm",\n  open(path, lineNumber) {\n    exec(\n      \\`webstorm "\\${process.cwd()}/\\${path}" --line \\${lineNumber ? \\`--line \\${lineNumber}\\` : ""}\\`.replace(\n        /\\\\$/g,\n        "\\\\\\\\$",\n      ),\n    );\n  },\n};\n`})}),`\n`,(0,n.jsx)(e.h3,{id:"goland",children:"GoLand"}),`\n`,(0,n.jsx)(e.p,{children:"To use WebStorm as your editor, you can use the following configuration:"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:`import { exec } from "node:child_process";\nimport { cwd } from "node:process";\n\nconst editor = {\n  name: "WebStorm",\n  open(path, lineNumber) {\n    if (!path) return;\n    exec(\n      \\`goland "\\${process.cwd()}/\\${path}" \\${lineNumber ? \\`--line \\${lineNumber}\\` : ""}\\`\n    );\n  },\n};\n`})})]})}function a(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,{...o,children:(0,n.jsx)(s,{...o})}):s(o)}return N(y);})();\n;return Component;',
		_meta: {
			filePath: "02-configuration/03-editor.mdx",
			fileName: "03-editor.mdx",
			directory: "02-configuration",
			extension: "mdx",
			path: "02-configuration/03-editor",
		},
		slug: "configuration/editor",
		section: "02-configuration",
		rawMdx:
			'Everyone uses their own editors, so it\'s important to be able to configure the editor that React Router Devtools will open your files in.\n\n```ts\ntype EditorConfig = {\n  name: string;\n  open(path: string, lineNumber: string | undefined): void;\n}\n```\n\n## `name`\n\nThe name of the editor that will be displayed on the Open in Editor button.\n\n## `open`\n\nThis function will be called when the user clicks the Open in Editor button. It will receive the path to the file and the line number to open the file at.\nThis function will both handle the case where you shift + right click an element on the page AND the open in X button in the UI, they return different values\nso be sure to cover both of them.\n\n```ts\nimport { exec } from "node:child_process";\nimport { normalizePath } from "vite";\n\nfunction open(path: string, lineNumber: string | undefined) {\n  exec(`code -g "${normalizePath(path)}${lineNumber ? `:${lineNumber}` : ""}"`);\n}\n```\n\n## Editors\n\nBelow are some examples of configurations for popular editors.\n\n### VS Code\n\nTo use VS Code as your editor, you don\'t need to do anything, it\'s the default editor.\n\n### WebStorm\n\nTo use WebStorm as your editor, you can use the following configuration:\n\n```ts\nimport { exec } from "node:child_process";\nimport { cwd } from "node:process";\n\nconst editor = {\n  name: "WebStorm",\n  open(path, lineNumber) {\n    exec(\n      `webstorm "${process.cwd()}/${path}" --line ${lineNumber ? `--line ${lineNumber}` : ""}`.replace(\n        /\\$/g,\n        "\\\\$",\n      ),\n    );\n  },\n};\n```\n\n### GoLand\n\nTo use WebStorm as your editor, you can use the following configuration:\n\n```ts\nimport { exec } from "node:child_process";\nimport { cwd } from "node:process";\n\nconst editor = {\n  name: "WebStorm",\n  open(path, lineNumber) {\n    if (!path) return;\n    exec(\n      `goland "${process.cwd()}/${path}" ${lineNumber ? `--line ${lineNumber}` : ""}`\n    );\n  },\n};\n```',
	},
	{
		title: "React Router Devtools Server Configuration",
		summary: "Beginner's Guide",
		description: "Configuration options for the React Router Devtools server",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var g=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var v=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),m=(r,e)=>{for(var i in e)o(r,i,{get:e[i],enumerable:!0})},h=(r,e,i,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let l of f(e))!p.call(r,l)&&l!==i&&o(r,l,{get:()=>e[l],enumerable:!(t=u(e,l))||t.enumerable});return r};var b=(r,e,i)=>(i=r!=null?g(w(r)):{},h(e||!r||!r.__esModule?o(i,"default",{value:r,enumerable:!0}):i,r)),y=r=>h(o({},"__esModule",{value:!0}),r);var c=v((C,d)=>{d.exports=_jsx_runtime});var T={};m(T,{default:()=>a});var n=b(c());function s(r){let e={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:"As with the client configuration, we will first see the full configuration type:"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:`interface ReactRouterServerConfig {\n  silent?: boolean;\n  logs?: {\n    cookies?: boolean;\n    defer?: boolean;\n    actions?: boolean;\n    loaders?: boolean;\n    cache?: boolean;\n    siteClear?: boolean;\n    serverTimings?: boolean;\n  };\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:"silent",children:(0,n.jsx)(e.code,{children:"silent"})}),`\n`,(0,n.jsxs)(e.p,{children:["When ",(0,n.jsx)(e.code,{children:"true"}),", the server will not log anything to the console. This is useful for production environments."]}),`\n`,(0,n.jsx)(e.h2,{id:"logs",children:(0,n.jsx)(e.code,{children:"logs"})}),`\n`,(0,n.jsxs)(e.p,{children:[`This object allows you to configure the server logs. Each key is a log type and the value is a boolean indicating whether to log that type.\nAll are `,(0,n.jsx)(e.code,{children:"true"})," by default so you don\'t have to provide anything, if you want to be granular you can, otherwise you can use the ",(0,n.jsx)(e.code,{children:"silent"}),` option to turn off\nall logs.`]}),`\n`,(0,n.jsx)(e.h3,{id:"cookies",children:(0,n.jsx)(e.code,{children:"cookies"})}),`\n`,(0,n.jsxs)(e.p,{children:["When ",(0,n.jsx)(e.code,{children:"true"}),\', the server will log all cookies sent by the server in the "Set-Cookie" header.\']}),`\n`,(0,n.jsx)(e.h3,{id:"defer",children:(0,n.jsx)(e.code,{children:"defer"})}),`\n`,(0,n.jsxs)(e.p,{children:["When ",(0,n.jsx)(e.code,{children:"true"}),`, the server will log all deferred actions.\nThe following gets logged:`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:"The defer location"}),`\n`,(0,n.jsx)(e.li,{children:"The keys that were deferred"}),`\n`,(0,n.jsx)(e.li,{children:"The time it took for each key to resolve"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:"actions",children:(0,n.jsx)(e.code,{children:"actions"})}),`\n`,(0,n.jsxs)(e.p,{children:["When ",(0,n.jsx)(e.code,{children:"true"}),", the server will log all actions that are hit with a request."]}),`\n`,(0,n.jsx)(e.h3,{id:"loaders",children:(0,n.jsx)(e.code,{children:"loaders"})}),`\n`,(0,n.jsxs)(e.p,{children:["When ",(0,n.jsx)(e.code,{children:"true"}),", the server will log all loaders that are hit with a request."]}),`\n`,(0,n.jsx)(e.h3,{id:"cache",children:(0,n.jsx)(e.code,{children:"cache"})}),`\n`,(0,n.jsxs)(e.p,{children:["When ",(0,n.jsx)(e.code,{children:"true"}),", the server will log all loaders/actions that return a ",(0,n.jsx)(e.code,{children:"Cache Control"})," header."]}),`\n`,(0,n.jsx)(e.h3,{id:"siteclear",children:(0,n.jsx)(e.code,{children:"siteClear"})}),`\n`,(0,n.jsxs)(e.p,{children:["When ",(0,n.jsx)(e.code,{children:"true"}),", the server will log when the site cache is cleared, or anything else with the ",(0,n.jsx)(e.code,{children:"Clear-Site-Data"})," header."]}),`\n`,(0,n.jsx)(e.h3,{id:"servertimings",children:(0,n.jsx)(e.code,{children:"serverTimings"})}),`\n`,(0,n.jsxs)(e.p,{children:["When ",(0,n.jsx)(e.code,{children:"true"}),", the server will log all server timings that are returned with a request"]}),`\n`,(0,n.jsx)(e.h2,{id:"servertimingthreshold",children:(0,n.jsx)(e.code,{children:"serverTimingThreshold"})}),`\n`,(0,n.jsx)(e.p,{children:`This option is used to set the threshold for server timings to be logged in the console.\nIf the server timing is greater than this threshold, it will be logged in red, otherwise it will be logged in green.`}),`\n`,(0,n.jsxs)(e.p,{children:["By default it is set to ",(0,n.jsx)(e.code,{children:"Number.POSITIVE_INFINITY"})," which means that all server timings will be logged in green."]})]})}function a(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(s,{...r})}):s(r)}return y(T);})();\n;return Component;',
		_meta: {
			filePath: "02-configuration/04-server.mdx",
			fileName: "04-server.mdx",
			directory: "02-configuration",
			extension: "mdx",
			path: "02-configuration/04-server",
		},
		slug: "configuration/server",
		section: "02-configuration",
		rawMdx:
			'As with the client configuration, we will first see the full configuration type:\n\n```ts\ninterface ReactRouterServerConfig {\n  silent?: boolean;\n  logs?: {\n    cookies?: boolean;\n    defer?: boolean;\n    actions?: boolean;\n    loaders?: boolean;\n    cache?: boolean;\n    siteClear?: boolean;\n    serverTimings?: boolean;\n  };\n}\n```\n\n## `silent`\n\nWhen `true`, the server will not log anything to the console. This is useful for production environments.\n\n## `logs`\n\nThis object allows you to configure the server logs. Each key is a log type and the value is a boolean indicating whether to log that type.\nAll are `true` by default so you don\'t have to provide anything, if you want to be granular you can, otherwise you can use the `silent` option to turn off\nall logs.\n\n### `cookies`\n\nWhen `true`, the server will log all cookies sent by the server in the "Set-Cookie" header.\n\n### `defer`\n\nWhen `true`, the server will log all deferred actions.\nThe following gets logged:\n- The defer location\n- The keys that were deferred\n- The time it took for each key to resolve\n\n### `actions`\n\nWhen `true`, the server will log all actions that are hit with a request.\n\n### `loaders`\n\nWhen `true`, the server will log all loaders that are hit with a request.\n\n### `cache`\n\nWhen `true`, the server will log all loaders/actions that return a `Cache Control` header.\n\n### `siteClear`\n\nWhen `true`, the server will log when the site cache is cleared, or anything else with the `Clear-Site-Data` header.\n\n### `serverTimings`\n\nWhen `true`, the server will log all server timings that are returned with a request\n\n## `serverTimingThreshold`\n\nThis option is used to set the threshold for server timings to be logged in the console.\nIf the server timing is greater than this threshold, it will be logged in red, otherwise it will be logged in green.\n\nBy default it is set to `Number.POSITIVE_INFINITY` which means that all server timings will be logged in green.',
	},
	{
		title: "Keyboard Shortcuts",
		summary: "Beginner's Guide",
		description: "Detailed overview of all keyboard shortcuts in React Router Devtools",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var u=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var m=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),w=(o,e)=>{for(var t in e)c(o,t,{get:e[t],enumerable:!0})},i=(o,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let h of g(e))!f.call(o,h)&&h!==t&&c(o,h,{get:()=>e[h],enumerable:!(r=p(e,h))||r.enumerable});return o};var k=(o,e,t)=>(t=o!=null?u(y(o)):{},i(e||!o||!o.__esModule?c(t,"default",{value:o,enumerable:!0}):t,o)),x=o=>i(c({},"__esModule",{value:!0}),o);var l=m((T,s)=>{s.exports=_jsx_runtime});var v={};w(v,{default:()=>a});var n=k(l());function d(o){let e={a:"a",code:"code",h2:"h2",p:"p",strong:"strong",...o.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{id:"go-to-source",children:"Go To Source"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Shift + Right Click"})}),`\n`,(0,n.jsx)(e.p,{children:`When you are in the browser and you want to go to the source code of a component, you can right click on the component\nwhile holding down shift. This will open the source code of the component in your code editor.`}),`\n`,(0,n.jsx)(e.h2,{id:"openingclosing-the-devtools",children:"Opening/closing the DevTools"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Shift + A"})}),`\n`,(0,n.jsxs)(e.p,{children:["When you are in the browser and you want to open the React Router Devtools, you can press ",(0,n.jsx)(e.code,{children:"Shift + A"}),`.\nThis will open the DevTools, if you\'re already in the DevTools, it will close it.`]}),`\n`,(0,n.jsxs)(e.p,{children:["While in the DevTools, you can also use ",(0,n.jsx)(e.code,{children:"Esc"})," to close them."]}),`\n`,(0,n.jsx)(e.p,{children:"From version 4.2.0 is fully configurable and you can change the shortcut in the settings."}),`\n`,(0,n.jsxs)(e.p,{children:["We use ",(0,n.jsx)(e.a,{href:"https://www.npmjs.com/package/react-hotkeys-hook",children:"react-hotkeys-hook"}),` to handle the keyboard shortcuts under the hood.\nYou can adapt to their API to add your own shortcuts.`]}),`\n`,(0,n.jsx)(e.p,{children:"Check out the settings tab for details"})]})}function a(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,{...o,children:(0,n.jsx)(d,{...o})}):d(o)}return x(v);})();\n;return Component;',
		_meta: {
			filePath: "03-features/01-shortcuts.mdx",
			fileName: "01-shortcuts.mdx",
			directory: "03-features",
			extension: "mdx",
			path: "03-features/01-shortcuts",
		},
		slug: "features/shortcuts",
		section: "03-features",
		rawMdx:
			"## Go To Source\n\n**Shift + Right Click**\n\nWhen you are in the browser and you want to go to the source code of a component, you can right click on the component\nwhile holding down shift. This will open the source code of the component in your code editor.\n\n## Opening/closing the DevTools\n\n**Shift + A**\n\nWhen you are in the browser and you want to open the React Router Devtools, you can press `Shift + A`.\nThis will open the DevTools, if you're already in the DevTools, it will close it.\n\nWhile in the DevTools, you can also use `Esc` to close them.\n\nFrom version 4.2.0 is fully configurable and you can change the shortcut in the settings.\n\nWe use [react-hotkeys-hook](https://www.npmjs.com/package/react-hotkeys-hook) to handle the keyboard shortcuts under the hood.\nYou can adapt to their API to add your own shortcuts.\n\nCheck out the settings tab for details",
	},
	{
		title: "Devtools context",
		summary: "Beginner's Guide",
		description: "Using the devtools context to trace events and send them to the network tab",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var T=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of m(e))!p.call(n,i)&&i!==r&&a(n,i,{get:()=>e[i],enumerable:!(o=v(e,i))||o.enumerable});return n};var w=(n,e,r)=>(r=n!=null?g(f(n)):{},c(e||!n||!n.__esModule?a(r,"default",{value:n,enumerable:!0}):r,n)),b=n=>c(a({},"__esModule",{value:!0}),n);var d=T((k,s)=>{s.exports=_jsx_runtime});var x={};y(x,{default:()=>u});var t=w(d());function l(n){let e={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...n.components},{InfoAlert:r,WarningAlert:o}=e;return r||h("InfoAlert",!0),o||h("WarningAlert",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"devtools-extended-context",children:"Devtools extended context"}),`\n`,(0,t.jsx)(e.p,{children:`The devtools context is a set of utilities that you can use in your data fetching functions to trace events\nin the network tab of react-router-devtools. You can also include them in your production builds if you do not want\nthe hassle of having to optionally check if they are defined.`}),`\n`,(0,t.jsx)(e.p,{children:"The general usage of the devtools context is as follows:"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`// The devTools object is available in all data fetching functions\nexport const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing.start("my-event")\n  // do something here, eg DB call\n  tracing.end("my-event", startTime!)\n  return "data"\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:"You can also use the devtools context in your action functions:"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`export const action = async ({ request, devTools }: ActionFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing?.start("my-event")\n  // do something\n  tracing?.end("my-event", startTime!)\n  return "data"\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:"The devtools context is also available in your client loader and client action functions:"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`export const clientLoader = async ({ request, devTools }: ClientLoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing?.start("my-event")\n  // do something\n  tracing?.end("my-event", startTime!)\n  return "data"\n}\n`})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`export const clientAction = async ({ request, devTools }: ClientActionFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing?.start("my-event")\n  // do something\n  tracing?.end("my-event", startTime!)\n  return "data"\n}\n`})}),`\n`,(0,t.jsxs)(r,{children:[(0,t.jsxs)(e.p,{children:["If you want to make the devTools available always in your project, you can set ",(0,t.jsx)(e.code,{children:"includeInProd"})," to ",(0,t.jsx)(e.code,{children:"{ devTools: true }"})," in your vite config."]}),(0,t.jsx)(e.p,{children:"In production the trace calls won\'t do anything, but the tracing will be more convinient to use."}),(0,t.jsx)(e.p,{children:"If you do so you can also override the types by adding the following to your project:"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`import type { ExtendedContext } from "react-router-devtools/context";\n\n   declare module "react-router" {\n   \tinterface LoaderFunctionArgs {\n   \t\tdevTools: ExtendedContext\n   \t}\n   \tinterface ActionFunctionArgs {\n   \t\tdevTools: ExtendedContext\n   \t}\n   }\n`})})]}),`\n`,(0,t.jsx)(e.h2,{id:"routeid",children:"RouteId"}),`\n`,(0,t.jsx)(e.p,{children:"The routeId is a string that is used to identify the route that is being processed. You can access it like so:"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const routeId = devTools?.routeId;\n  // do something with the routeId\n  return "data"\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:"tracing",children:"Tracing"}),`\n`,(0,t.jsx)(e.p,{children:"The tracing object contains all the utilities related to network tab tracing feature of react-router-devtools."}),`\n`,(0,t.jsx)(e.p,{children:"There are three functions you can use:"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:"trace"}),`\n`,(0,t.jsx)(e.li,{children:"start"}),`\n`,(0,t.jsx)(e.li,{children:"end"}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:"trace",children:"trace"}),`\n`,(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"trace"})," function is a function that will trace the event given to it, pipe it to the network tab of react-router-devtools and show you analytics."]}),`\n`,(0,t.jsx)(e.p,{children:"This works by calling the provided function and analyzing the time it takes to execute it."}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // this will be traced in the network tab of react-router-devtools\n  const user = tracing?.trace("my-event",() => getUser())\n\n\treturn { user }\n}\n`})}),`\n`,(0,t.jsx)(e.h4,{id:"parameters",children:"Parameters"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"name"})," - The name of the event"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"event"})," - The event to be traced"]}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{id:"returns",children:"Returns"}),`\n`,(0,t.jsx)(e.p,{children:"The result of the event"}),`\n`,(0,t.jsx)(e.h3,{id:"start",children:"start"}),`\n`,(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"start"}),` function is a function that will start a trace for the name provided to it and return the start time.\nThis is used together with `,(0,t.jsx)(e.code,{children:"end"})," to trace the time of the event."]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`export const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // this will be traced in the network tab of react-router-devtools\n  const startTime = tracing?.start("my-event")\n  // do something here, eg DB call\n\n\t// End the trace\n  tracing?.end("my-event", startTime!)\n  return "data"\n}\n`})}),`\n`,(0,t.jsx)(o,{title:"Warning",children:(0,t.jsxs)(e.p,{children:["This function relies on you using the ",(0,t.jsx)(e.code,{children:"end"}),` with the same name as the start event, otherwise\nyou will end up having a never ending loading bar in the network tab!`]})}),`\n`,(0,t.jsx)(e.h4,{id:"parameters-1",children:"Parameters"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"name"})," - The name of the event"]}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{id:"returns-1",children:"Returns"}),`\n`,(0,t.jsx)(e.p,{children:"The start time of the event"}),`\n`,(0,t.jsx)(e.h3,{id:"end",children:"end"}),`\n`,(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"end"})," function is a function that will end a trace for the name provided to it and return the end time."]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`export const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // this will be traced in the network tab of react-router-devtools\n  const startTime = tracing?.start("get user")\n  // do something here, eg DB call\n\tconst user = await getUser();\n\t// End the trace\n  tracing?.end("get user", startTime!, { user })\n  return "data"\n\n}\n`})}),`\n`,(0,t.jsx)(e.h4,{id:"parameters-2",children:"Parameters"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"name"})," - The name of the event"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"startTime"})," - The start time of the sendEvent"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"data"})," - The data to be sent with the event"]}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{id:"returns-2",children:"Returns"}),`\n`,(0,t.jsx)(e.p,{children:"The data provided in the last parameter"})]})}function u(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}function h(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}return b(x);})();\n;return Component;',
		_meta: {
			filePath: "03-features/02-devtools.mdx",
			fileName: "02-devtools.mdx",
			directory: "03-features",
			extension: "mdx",
			path: "03-features/02-devtools",
		},
		slug: "features/devtools",
		section: "03-features",
		rawMdx:
			'## Devtools extended context\n\nThe devtools context is a set of utilities that you can use in your data fetching functions to trace events\nin the network tab of react-router-devtools. You can also include them in your production builds if you do not want\nthe hassle of having to optionally check if they are defined.\n\nThe general usage of the devtools context is as follows:\n\n```ts\n// The devTools object is available in all data fetching functions\nexport const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing.start("my-event")\n  // do something here, eg DB call\n  tracing.end("my-event", startTime!)\n  return "data"\n}\n```\n\nYou can also use the devtools context in your action functions:\n\n```ts\nexport const action = async ({ request, devTools }: ActionFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing?.start("my-event")\n  // do something\n  tracing?.end("my-event", startTime!)\n  return "data"\n}\n```\n\nThe devtools context is also available in your client loader and client action functions:\n\n```ts\nexport const clientLoader = async ({ request, devTools }: ClientLoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing?.start("my-event")\n  // do something\n  tracing?.end("my-event", startTime!)\n  return "data"\n}\n```\n\n```ts\nexport const clientAction = async ({ request, devTools }: ClientActionFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // tracing is a set of utilities to be used in your data fetching functions to trace events\n  // in network tab of react-router-devtools\n  const startTime = tracing?.start("my-event")\n  // do something\n  tracing?.end("my-event", startTime!)\n  return "data"\n}\n```\n\n\n<InfoAlert>\n If you want to make the devTools available always in your project, you can set `includeInProd` to `{ devTools: true }` in your vite config.\n\n In production the trace calls won\'t do anything, but the tracing will be more convinient to use.\n\n If you do so you can also override the types by adding the following to your project:\n ```ts\n import type { ExtendedContext } from "react-router-devtools/context";\n\n\tdeclare module "react-router" {\n\t\tinterface LoaderFunctionArgs {\n\t\t\tdevTools: ExtendedContext\n\t\t}\n\t\tinterface ActionFunctionArgs {\n\t\t\tdevTools: ExtendedContext\n\t\t}\n\t}\n ```\n</InfoAlert>\n\n## RouteId\n\nThe routeId is a string that is used to identify the route that is being processed. You can access it like so:\n```ts\nconst loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const routeId = devTools?.routeId;\n  // do something with the routeId\n  return "data"\n}\n```\n\n## Tracing\n\nThe tracing object contains all the utilities related to network tab tracing feature of react-router-devtools.\n\n\nThere are three functions you can use:\n- trace\n- start\n- end\n\n\n\n### trace\n\nThe `trace` function is a function that will trace the event given to it, pipe it to the network tab of react-router-devtools and show you analytics.\n\nThis works by calling the provided function and analyzing the time it takes to execute it.\n\n```ts\nconst loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // this will be traced in the network tab of react-router-devtools\n  const user = tracing?.trace("my-event",() => getUser())\n\n\treturn { user }\n}\n```\n\n#### Parameters\n\n- `name` - The name of the event\n- `event` - The event to be traced\n\n#### Returns\n\nThe result of the event\n\n### start\n\nThe `start` function is a function that will start a trace for the name provided to it and return the start time.\nThis is used together with `end` to trace the time of the event.\n\n```ts\nexport const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // this will be traced in the network tab of react-router-devtools\n  const startTime = tracing?.start("my-event")\n  // do something here, eg DB call\n\n\t// End the trace\n  tracing?.end("my-event", startTime!)\n  return "data"\n}\n```\n\n<WarningAlert title="Warning">\n This function relies on you using the `end` with the same name as the start event, otherwise\nyou will end up having a never ending loading bar in the network tab!\n</WarningAlert>\n\n\n#### Parameters\n\n- `name` - The name of the event\n\n#### Returns\n\nThe start time of the event\n\n### end\n\nThe `end` function is a function that will end a trace for the name provided to it and return the end time.\n\n```ts\nexport const loader = async ({ request, devTools }: LoaderFunctionArgs) => {\n  const tracing = devTools?.tracing;\n  // this will be traced in the network tab of react-router-devtools\n  const startTime = tracing?.start("get user")\n  // do something here, eg DB call\n\tconst user = await getUser();\n\t// End the trace\n  tracing?.end("get user", startTime!, { user })\n  return "data"\n\n}\n```\n\n#### Parameters\n\n- `name` - The name of the event\n- `startTime` - The start time of the sendEvent\n- `data` - The data to be sent with the event\n\n#### Returns\n\nThe data provided in the last parameter',
	},
	{
		title: "Active Page Tab",
		summary: "Beginner's Guide",
		description: "Detailed overview of all features on the active page tab.",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},a=(t,e,i,l)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of m(e))!g.call(t,r)&&r!==i&&o(t,r,{get:()=>e[r],enumerable:!(l=p(e,r))||l.enumerable});return t};var w=(t,e,i)=>(i=t!=null?u(f(t)):{},a(e||!t||!t.__esModule?o(i,"default",{value:t,enumerable:!0}):i,t)),y=t=>a(o({},"__esModule",{value:!0}),t);var d=v((j,h)=>{h.exports=_jsx_runtime});var x={};b(x,{default:()=>s});var n=w(d());function c(t){let e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...t.components},{InfoAlert:i}=e;return i||T("InfoAlert",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`The Active Page tab is the first tab that appears when you open up the dev tools panel. It contains an overview of all active loaders\non the current page and detailed information about each loader.`}),`\n`,(0,n.jsx)(e.h2,{id:"route-boundaries",children:"Route boundaries"}),`\n`,(0,n.jsxs)(e.p,{children:[`The first feature we will go over is the route boundaries. This feature shows you the current route boundaries on the actual page.\nThis is useful for debugging and testing purposes. It finds the `,(0,n.jsx)(e.code,{children:"<Outlet />"}),` component in the route and highlights it with a\ngradient background that can be set in the settings.`]}),`\n`,(0,n.jsxs)(i,{children:[(0,n.jsxs)(e.p,{children:["This feature is only available in the development mode because it used react dev tools to find the ",(0,n.jsx)(e.code,{children:"<Outlet />"})," component."]}),(0,n.jsxs)(e.p,{children:["If you want to try it open up the dev tools right now nad hover over ",(0,n.jsx)(e.code,{children:"/docs/main"})," in the panel."]}),(0,n.jsx)(e.p,{children:"You can also change the gradient background color in the settings."})]}),`\n`,(0,n.jsx)(e.h2,{id:"loader-list",children:"Loader list"}),`\n`,(0,n.jsx)(e.p,{children:`The loader list is a list of all active loaders on the current page. It shows the url segment of the loader,\nthe loader type and the loader file.`}),`\n`,(0,n.jsxs)(i,{children:[(0,n.jsx)(e.p,{children:"The loader type is determined by the routing convention."}),(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"purple"})," - represents the root.tsx file"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"blue"})," - represents a pathless layout file"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"green"})," - represents a normal route file, whether index or not"]}),`\n`]})]}),`\n`,(0,n.jsx)(e.h3,{id:"open-in-vs-code",children:"Open in VS code"}),`\n`,(0,n.jsxs)(e.p,{children:["Each segment has an ",(0,n.jsx)(e.strong,{children:"open in VS code"}),` button that opens the loader file in VS code.\nThis is useful for quick navigation to the loader file.`]}),`\n`,(0,n.jsx)(i,{title:"Caveat!",children:(0,n.jsxs)(e.p,{children:["This only works if you have the ",(0,n.jsx)(e.code,{children:"code"}),` command installed in your terminal. If you don\'t have it installed you can\ninstall it by following the instructions `,(0,n.jsx)(e.a,{href:"https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line",children:"here"}),"."]})}),`\n`,(0,n.jsx)(e.h3,{id:"loader-data",children:"Loader data"}),`\n`,(0,n.jsxs)(e.p,{children:["Each segment has a loader data ",(0,n.jsx)(e.strong,{children:"JSON"})," object that contains all the information returned by the loader of that segment."]}),`\n`,(0,n.jsxs)(e.p,{children:["If you open the dev tools on this page  and look at the ",(0,n.jsx)(e.code,{children:"/docs/main"})," segment you will see the ",(0,n.jsx)(e.strong,{children:"loader data object"}),` which contains\n`,(0,n.jsx)(e.code,{children:"metadata"}),", ",(0,n.jsx)(e.code,{children:"tag"}),", ",(0,n.jsx)(e.code,{children:"serverData"}),", ",(0,n.jsx)(e.code,{children:"deferredServerData"})," and ",(0,n.jsx)(e.code,{children:"key"})," properties."]}),`\n`,(0,n.jsxs)(e.p,{children:["This part will contain everything returned from the server and it will be ",(0,n.jsx)(e.strong,{children:"hot swapped"})," if the data changes."]}),`\n`,(0,n.jsx)(i,{children:(0,n.jsx)(e.p,{children:"When keys are deferred on the server, the data will hot swap when the key is resolved on the client."})}),`\n`,(0,n.jsx)(e.h3,{id:"route-params",children:"Route params"}),`\n`,(0,n.jsx)(e.p,{children:"The route params section contains all the route params for the current segment."}),`\n`,(0,n.jsxs)(e.p,{children:["This will contain all the ",(0,n.jsx)(e.strong,{children:"wildcard"})," params currently available on this route."]}),`\n`,(0,n.jsxs)(e.p,{children:["If you open up the dev tools, you will be able to see that ",(0,n.jsx)(e.code,{children:"tag"})," and ",(0,n.jsx)(e.code,{children:"slug"}),` are both in\nthe route params.`]}),`\n`,(0,n.jsx)(e.h3,{id:"server-info",children:"Server info"}),`\n`,(0,n.jsx)(e.p,{children:"The server info section contains all the server information for the current segment, including:"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"loaderTriggerCount"})," - the number of times the loader has been triggered (updates in real-time)"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"actionTriggerCount"})," - the number of times the action has been triggered (updates in real-time)"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"lowestExecutionTime"})," - the lowest execution time of the loader (updates in real-time)"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"highestExecutionTime"})," - the highest execution time of the loader (updates in real-time)"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"averageExecutionTime"})," - the average execution time of the loader (updates in real-time)"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"lastLoaderInfo"})," - the last loader info object (updates in real-time), includes execution time, request headers and response headers."]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"lastActionInfo"})," - the last action info object (updates in real-time), includes execution time, request headers and response headers."]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"loaderCalls"})," - an array of loaderInfo objects ordered from most recent to least recent (updates in real-time)"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"actionCalls"})," - an array of actionInfo objects ordered from most recent to least recent (updates in real-time)"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:"handles",children:"handles"}),`\n`,(0,n.jsx)(e.p,{children:"The handles section contains all the handles for the current segment."}),`\n`,(0,n.jsxs)(e.p,{children:["This will contain all the ",(0,n.jsx)(e.strong,{children:"handles"})," currently available on this route."]}),`\n`,(0,n.jsxs)(e.p,{children:["React Router allows you to export a custom ",(0,n.jsx)(e.strong,{children:"handle"})," export which can be anything, it will be shown here if it is exported."]}),`\n`,(0,n.jsx)(e.h2,{id:"revalidation",children:"Revalidation"}),`\n`,(0,n.jsxs)(e.p,{children:["There is a ",(0,n.jsx)(e.strong,{children:"Revalidate"})," button that allows you to revalidate all the loaders on the page."]}),`\n`,(0,n.jsx)(e.h2,{id:"timeline",children:"Timeline"}),`\n`,(0,n.jsx)(e.p,{children:"The timeline section on the right contains useful information on navigation and submission events in your application."}),`\n`,(0,n.jsx)(e.p,{children:"Every time there is a navigation or submission event, a new entry will be added to the timeline on the top."}),`\n`,(0,n.jsx)(e.p,{children:"It is limited to 50 entries and will remove the oldest entry when the limit is reached."}),`\n`,(0,n.jsx)(e.p,{children:"The timeline will contain the following information for each event:"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"type"})," - the type of event (navigation or submission, fetcher or normal)"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"method"})," - the method of the event (GET, POST, PUT, DELETE)"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"url"})," - the url of the event"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"data sent"})," - the data sent in the event"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"response"})," - the response of the event"]}),`\n`]}),`\n`,(0,n.jsx)(i,{children:(0,n.jsx)(e.p,{children:`This only happens for events that change the state of the app, if there is a client-side navigation to a\nnew location that has no loaders nothing will happen because the state has remained idle.`})}),`\n`,(0,n.jsx)(e.h3,{id:"clearing-the-timeline",children:"Clearing the timeline"}),`\n`,(0,n.jsxs)(e.p,{children:["You can clear the timeline by clicking the ",(0,n.jsx)(e.strong,{children:"clear"})," button at the top right of the timeline."]})]})}function s(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(c,{...t})}):c(t)}function T(t,e){throw new Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}return y(x);})();\n;return Component;',
		_meta: {
			filePath: "03-features/03-active-page-tab.mdx",
			fileName: "03-active-page-tab.mdx",
			directory: "03-features",
			extension: "mdx",
			path: "03-features/03-active-page-tab",
		},
		slug: "features/active-page-tab",
		section: "03-features",
		rawMdx:
			'The Active Page tab is the first tab that appears when you open up the dev tools panel. It contains an overview of all active loaders\non the current page and detailed information about each loader.\n\n## Route boundaries\n\nThe first feature we will go over is the route boundaries. This feature shows you the current route boundaries on the actual page.\nThis is useful for debugging and testing purposes. It finds the `<Outlet />` component in the route and highlights it with a\ngradient background that can be set in the settings.\n\n<InfoAlert>\n  This feature is only available in the development mode because it used react dev tools to find the `<Outlet />` component.\n\n  If you want to try it open up the dev tools right now nad hover over `/docs/main` in the panel.\n\n  You can also change the gradient background color in the settings.\n</InfoAlert>\n\n## Loader list\n\nThe loader list is a list of all active loaders on the current page. It shows the url segment of the loader,\nthe loader type and the loader file.\n\n<InfoAlert>\n  The loader type is determined by the routing convention.\n  - `purple` - represents the root.tsx file\n  - `blue` - represents a pathless layout file\n  - `green` - represents a normal route file, whether index or not\n</InfoAlert>\n\n### Open in VS code\n\nEach segment has an **open in VS code** button that opens the loader file in VS code.\nThis is useful for quick navigation to the loader file.\n\n<InfoAlert title="Caveat!">\nThis only works if you have the `code` command installed in your terminal. If you don\'t have it installed you can\n install it by following the instructions [here](https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line).\n</InfoAlert>\n\n### Loader data\n\nEach segment has a loader data **JSON** object that contains all the information returned by the loader of that segment.\n\nIf you open the dev tools on this page  and look at the `/docs/main` segment you will see the **loader data object** which contains\n`metadata`, `tag`, `serverData`, `deferredServerData` and `key` properties.\n\nThis part will contain everything returned from the server and it will be **hot swapped** if the data changes.\n\n<InfoAlert>\n  When keys are deferred on the server, the data will hot swap when the key is resolved on the client.\n\n</InfoAlert>\n\n### Route params\n\nThe route params section contains all the route params for the current segment.\n\nThis will contain all the **wildcard** params currently available on this route.\n\nIf you open up the dev tools, you will be able to see that `tag` and `slug` are both in\nthe route params.\n\n### Server info\n\nThe server info section contains all the server information for the current segment, including:\n- `loaderTriggerCount` - the number of times the loader has been triggered (updates in real-time)\n- `actionTriggerCount` - the number of times the action has been triggered (updates in real-time)\n- `lowestExecutionTime` - the lowest execution time of the loader (updates in real-time)\n- `highestExecutionTime` - the highest execution time of the loader (updates in real-time)\n- `averageExecutionTime` - the average execution time of the loader (updates in real-time)\n- `lastLoaderInfo` - the last loader info object (updates in real-time), includes execution time, request headers and response headers.\n- `lastActionInfo` - the last action info object (updates in real-time), includes execution time, request headers and response headers.\n- `loaderCalls` - an array of loaderInfo objects ordered from most recent to least recent (updates in real-time)\n- `actionCalls` - an array of actionInfo objects ordered from most recent to least recent (updates in real-time)\n\n### handles\n\nThe handles section contains all the handles for the current segment.\n\nThis will contain all the **handles** currently available on this route.\n\nReact Router allows you to export a custom **handle** export which can be anything, it will be shown here if it is exported.\n\n## Revalidation\n\nThere is a **Revalidate** button that allows you to revalidate all the loaders on the page.\n\n\n## Timeline\n\nThe timeline section on the right contains useful information on navigation and submission events in your application.\n\nEvery time there is a navigation or submission event, a new entry will be added to the timeline on the top.\n\nIt is limited to 50 entries and will remove the oldest entry when the limit is reached.\n\nThe timeline will contain the following information for each event:\n- `type` - the type of event (navigation or submission, fetcher or normal)\n- `method` - the method of the event (GET, POST, PUT, DELETE)\n- `url` - the url of the event\n- `data sent` - the data sent in the event\n- `response` - the response of the event\n\n<InfoAlert>\nThis only happens for events that change the state of the app, if there is a client-side navigation to a\nnew location that has no loaders nothing will happen because the state has remained idle.\n</InfoAlert>\n\n### Clearing the timeline\n\nYou can clear the timeline by clicking the **clear** button at the top right of the timeline.',
	},
	{
		title: "Routes Tab",
		summary: "Beginner's Guide",
		description: "Detailed overview of all features on the Routes Tab.",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var c=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var n in e)i(r,n,{get:e[n],enumerable:!0})},s=(r,e,n,h)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of p(e))!w.call(r,o)&&o!==n&&i(r,o,{get:()=>e[o],enumerable:!(h=f(e,o))||h.enumerable});return r};var b=(r,e,n)=>(n=r!=null?c(m(r)):{},s(e||!r||!r.__esModule?i(n,"default",{value:r,enumerable:!0}):n,r)),v=r=>s(i({},"__esModule",{value:!0}),r);var l=y((_,a)=>{a.exports=_jsx_runtime});var x={};g(x,{default:()=>u});var t=b(l());function d(r){let e={em:"em",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...r.components},{InfoAlert:n}=e;return n||T("InfoAlert",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:`The Routes tab shows you all the routes in your React Router application either in the tree view or a list view.\nThe default is the tree view which shows the routes in a nested tree structure. You can switch to the list view by\nclicking the list icon in the top left corner of the tab.`}),`\n`,(0,t.jsx)(e.p,{children:"The featureset is identical across both but only shown differently based on your preference."}),`\n`,(0,t.jsxs)(e.p,{children:["The only difference is the fact that the ",(0,t.jsx)(e.strong,{children:"tree view"}),` shows you which routes are currently active on the page. This is\nindicated by a golden line going through the tree from the root to the active route. The `,(0,t.jsx)(e.strong,{children:"list view"}),` does not have this\nfeature.`]}),`\n`,(0,t.jsx)(e.h2,{id:"route-types",children:"Route types"}),`\n`,(0,t.jsx)(e.p,{children:"There are three types of routes in react-router-devtools:"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:"root"}),` - The root route is the first route that is loaded when you open the application.\nIt is the first route in the tree. (purple)`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:"route"}),` - A route is a route that is not a root route. It is a route that is nested under another route and has\na url segment. (green)`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:"layout"}),` - A layout is a route that is not a root route and is a special kind of route that does not have a url\nsegment but provides only an outlet with some layout for the child routes (blue)`]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:"route-info",children:"Route info"}),`\n`,(0,t.jsx)(e.p,{children:`Clicking on any route name will show you detailed information about that route. This includes the route\'s name, the\nroute\'s path, the route\'s url, the route\'s file and does it contain the following things:`}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:"loader"}),` - The loader is the function that is called when the route is loaded. It is responsible for fetching the data\nneeded for the route.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:"action"}),` - The action is the function that is called when the route is submitted. It is responsible for handling the\nform submission.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:"ErrorBoundary"}),` - The ErrorBoundary is the component that is called when the route has an error. It is responsible for\nshowing the error message to the user.`]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:"All of these segments are colored in either red or green indicating if it exists or not."}),`\n`,(0,t.jsx)(n,{children:(0,t.jsx)(e.p,{children:`The error boundary will tell you if the error boundary for the current route comes from the route itself or is inherited\nfrom a parent route. If it is inherited, it will show you the name of the parent route.`})}),`\n`,(0,t.jsx)(e.h2,{id:"wildcard-parameters",children:"Wildcard parameters"}),`\n`,(0,t.jsxs)(e.p,{children:["If a route has a wildcard parameter, it will be shown in the ",(0,t.jsx)(e.strong,{children:"Wildcard parameters"}),` section which allows you to enter\nany value for the wildcard parameter. This is useful when combined with the `,(0,t.jsx)(e.strong,{children:"Open in Browser"}),` button that redirects\nyou to the route with the wildcard parameter.`]}),`\n`,(0,t.jsx)(e.p,{children:"The wildcard values are saved in the browser so you can persist them across development sessions."})]})}function u(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(d,{...r})}):d(r)}function T(r,e){throw new Error("Expected "+(e?"component":"object")+" `"+r+"` to be defined: you likely forgot to import, pass, or provide it.")}return v(x);})();\n;return Component;',
		_meta: {
			filePath: "03-features/04-routes-tab.mdx",
			fileName: "04-routes-tab.mdx",
			directory: "03-features",
			extension: "mdx",
			path: "03-features/04-routes-tab",
		},
		slug: "features/routes-tab",
		section: "03-features",
		rawMdx:
			"The Routes tab shows you all the routes in your React Router application either in the tree view or a list view.\nThe default is the tree view which shows the routes in a nested tree structure. You can switch to the list view by\n clicking the list icon in the top left corner of the tab.\n\nThe featureset is identical across both but only shown differently based on your preference.\n\nThe only difference is the fact that the **tree view** shows you which routes are currently active on the page. This is\n indicated by a golden line going through the tree from the root to the active route. The **list view** does not have this\n  feature.\n\n## Route types\n\nThere are three types of routes in react-router-devtools:\n- *root* - The root route is the first route that is loaded when you open the application.\nIt is the first route in the tree. (purple)\n- *route* - A route is a route that is not a root route. It is a route that is nested under another route and has\na url segment. (green)\n- *layout* - A layout is a route that is not a root route and is a special kind of route that does not have a url\nsegment but provides only an outlet with some layout for the child routes (blue)\n\n## Route info\n\nClicking on any route name will show you detailed information about that route. This includes the route's name, the\nroute's path, the route's url, the route's file and does it contain the following things:\n- *loader* - The loader is the function that is called when the route is loaded. It is responsible for fetching the data\n needed for the route.\n- *action* - The action is the function that is called when the route is submitted. It is responsible for handling the\n  form submission.\n- *ErrorBoundary* - The ErrorBoundary is the component that is called when the route has an error. It is responsible for\n  showing the error message to the user.\n\nAll of these segments are colored in either red or green indicating if it exists or not.\n\n<InfoAlert>\n  The error boundary will tell you if the error boundary for the current route comes from the route itself or is inherited\n  from a parent route. If it is inherited, it will show you the name of the parent route.\n</InfoAlert>\n\n## Wildcard parameters\n\nIf a route has a wildcard parameter, it will be shown in the **Wildcard parameters** section which allows you to enter\nany value for the wildcard parameter. This is useful when combined with the **Open in Browser** button that redirects\nyou to the route with the wildcard parameter.\n\nThe wildcard values are saved in the browser so you can persist them across development sessions.",
	},
	{
		title: "Network Tab",
		summary: "Beginner's Guide",
		description: "Detailed overview of all features on the Network Tab.",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var c=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),m=(n,e)=>{for(var r in e)s(n,r,{get:e[r],enumerable:!0})},a=(n,e,r,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of q(e))!p.call(n,i)&&i!==r&&s(n,i,{get:()=>e[i],enumerable:!(o=f(e,i))||o.enumerable});return n};var g=(n,e,r)=>(r=n!=null?c(y(n)):{},a(e||!n||!n.__esModule?s(r,"default",{value:n,enumerable:!0}):r,n)),w=n=>a(s({},"__esModule",{value:!0}),n);var d=b((_,l)=>{l.exports=_jsx_runtime});var k={};m(k,{default:()=>u});var t=g(d());function h(n){let e={code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...n.components},{InfoAlert:r}=e;return r||x("InfoAlert",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"The Network tab traces all the network requests that are happening in your application."}),`\n`,(0,t.jsx)(e.p,{children:"It shows you all the requests in real-time, with the ability to see if they are aborted, if they are cached, and if they are successful or not."}),`\n`,(0,t.jsxs)(e.p,{children:[`Clicking on a request will show you detailed information about that request. Additionally, you can shuffle through the requests with your keyboard.\nTo shuffle through the requests, press the `,(0,t.jsx)(e.code,{children:"\\u2190"})," and ",(0,t.jsx)(e.code,{children:"\\u2192"})," keys."]}),`\n`,(0,t.jsx)(e.h2,{id:"request-types",children:"Request types"}),`\n`,(0,t.jsx)(e.p,{children:"There are four types of requests in react-router-devtools:"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"client-loader"})," - A client-loader is a request that is initiated by the client and is used to load data for a route."]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"client-action"})," - A client-action is a request that is initiated by the client and is used to submit data to a route."]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"loader"})," - A loader is a request that is initiated by the server and is used to load data for a route."]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"action"})," - An action is a request that is initiated by the server and is used to submit data to a route."]}),`\n`]}),`\n`,(0,t.jsxs)(r,{children:[(0,t.jsx)(e.p,{children:"Each of these is colored differently for you to be able to quickly identify them."}),(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:"loader - green"}),`\n`,(0,t.jsx)(e.li,{children:"client-loader - blue"}),`\n`,(0,t.jsx)(e.li,{children:"action - purple"}),`\n`,(0,t.jsx)(e.li,{children:"client-action - yellow"}),`\n`,(0,t.jsx)(e.li,{children:"aborted requests - red"}),`\n`]})]}),`\n`,(0,t.jsx)(e.h2,{id:"request-info",children:"Request info"}),`\n`,(0,t.jsx)(e.p,{children:`Clicking on any request name will show you detailed information about that request. This includes the request\'s name, the\nrequest\'s method, the request\'s status, the request\'s start time, the request\'s end time, the request\'s type,\nthe request\'s data, the request\'s headers, and if the request\'s cached.`}),`\n`,(0,t.jsx)(e.h2,{id:"aborted-requests",children:"Aborted requests"}),`\n`,(0,t.jsx)(e.p,{children:"If a request is aborted, it will be shown in red. This means that the request was aborted by the user."})]})}function u(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}function x(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}return w(k);})();\n;return Component;',
		_meta: {
			filePath: "03-features/05-network-tab.mdx",
			fileName: "05-network-tab.mdx",
			directory: "03-features",
			extension: "mdx",
			path: "03-features/05-network-tab",
		},
		slug: "features/network-tab",
		section: "03-features",
		rawMdx:
			"The Network tab traces all the network requests that are happening in your application.\n\nIt shows you all the requests in real-time, with the ability to see if they are aborted, if they are cached, and if they are successful or not.\n\nClicking on a request will show you detailed information about that request. Additionally, you can shuffle through the requests with your keyboard.\nTo shuffle through the requests, press the `←` and `→` keys.\n\n## Request types\n\nThere are four types of requests in react-router-devtools:\n- **client-loader** - A client-loader is a request that is initiated by the client and is used to load data for a route.\n- **client-action** - A client-action is a request that is initiated by the client and is used to submit data to a route.\n- **loader** - A loader is a request that is initiated by the server and is used to load data for a route.\n- **action** - An action is a request that is initiated by the server and is used to submit data to a route.\n\n<InfoAlert>\n  Each of these is colored differently for you to be able to quickly identify them.\n- loader - green\n- client-loader - blue\n- action - purple\n- client-action - yellow\n-\taborted requests - red\n</InfoAlert>\n\n## Request info\n\nClicking on any request name will show you detailed information about that request. This includes the request's name, the\nrequest's method, the request's status, the request's start time, the request's end time, the request's type,\nthe request's data, the request's headers, and if the request's cached.\n\n## Aborted requests\n\nIf a request is aborted, it will be shown in red. This means that the request was aborted by the user.",
	},
	{
		title: "Errors Tab",
		summary: "Beginner's Guide",
		description: "Detailed overview of all features on the Errors Tab.",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var o in e)r(n,o,{get:e[o],enumerable:!0})},a=(n,e,o,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of y(e))!m.call(n,i)&&i!==o&&r(n,i,{get:()=>e[i],enumerable:!(s=f(e,i))||s.enumerable});return n};var w=(n,e,o)=>(o=n!=null?u(p(n)):{},a(e||!n||!n.__esModule?r(o,"default",{value:n,enumerable:!0}):o,n)),T=n=>a(r({},"__esModule",{value:!0}),n);var d=g((H,h)=>{h.exports=_jsx_runtime});var M={};v(M,{default:()=>l});var t=w(d());function c(n){let e={code:"code",h2:"h2",p:"p",strong:"strong",...n.components},{InfoAlert:o}=e;return o||b("InfoAlert",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:`The errors tab is a powerful tool for debugging issues with your react code, namely invalid HTML.\nIt helps you detect potential HTML issues in your code, such as invalid HTML nesting or hydration issues.`}),`\n`,(0,t.jsx)(e.h2,{id:"invalid-html",children:"Invalid HTML"}),`\n`,(0,t.jsxs)(e.p,{children:["If you have invalidely nested HTML (eg. a ",(0,t.jsx)(e.code,{children:"div"})," inside a ",(0,t.jsx)(e.code,{children:"p"}),`), you will see an error in the errors tab.\nThese kind of nesting issues can cause unexpected behavior in your application, namely hydration issues.\nThe browser does a lot of work to make sure that the HTML you send to the client is valid so it can\nsometimes move the order of elements around to make sure it\'s valid. This can cause unexpected hydration\nissues in your application.`]}),`\n`,(0,t.jsx)(e.p,{children:`Whenever there is a case of this found in your html the errors tab will show you the error and the file\nwhere the error is found. If the error is found in a file that is a part of your project you can click on the\nfile name to open the file in your editor and change the issue right away.`}),`\n`,(0,t.jsx)(e.h2,{id:"hydration-mismatch",children:"Hydration Mismatch"}),`\n`,(0,t.jsx)(e.p,{children:`Hydration mismatch is a common issue in React applications. It occurs when the server-rendered HTML does not match the\nHTML generated by the client. This can cause unexpected behavior in your application,\nsuch as the loss of user input or the loss of scroll position. In React Router it can also cause FOUC (Flash of Unstyled Content).`}),`\n`,(0,t.jsx)(e.p,{children:`To avoid hydration mismatch, you should make sure that the HTML generated by the server matches the HTML generated by\nthe client.`}),`\n`,(0,t.jsx)(e.p,{children:"These kind of issues are very hard to track down because they can be caused by a lot of different things."}),`\n`,(0,t.jsxs)(e.p,{children:["If a hydration mismatch happens the errors tab will show you the ",(0,t.jsx)(e.strong,{children:"diff"}),` between the server and client HTML, allowing\nyou to analyze the differences and fix the issue.`]}),`\n`,(0,t.jsx)(o,{children:(0,t.jsx)(e.p,{children:`Hydration mismatches happen on document requests (hard refresh or initial load in React Router). So if you don\'t see it at first\ntry refreshing your page.`})})]})}function l(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}function b(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}return T(M);})();\n;return Component;',
		_meta: {
			filePath: "03-features/06-errors-tab.mdx",
			fileName: "06-errors-tab.mdx",
			directory: "03-features",
			extension: "mdx",
			path: "03-features/06-errors-tab",
		},
		slug: "features/errors-tab",
		section: "03-features",
		rawMdx:
			"The errors tab is a powerful tool for debugging issues with your react code, namely invalid HTML.\nIt helps you detect potential HTML issues in your code, such as invalid HTML nesting or hydration issues.\n\n## Invalid HTML\n\nIf you have invalidely nested HTML (eg. a `div` inside a `p`), you will see an error in the errors tab.\nThese kind of nesting issues can cause unexpected behavior in your application, namely hydration issues.\nThe browser does a lot of work to make sure that the HTML you send to the client is valid so it can\nsometimes move the order of elements around to make sure it's valid. This can cause unexpected hydration\nissues in your application.\n\nWhenever there is a case of this found in your html the errors tab will show you the error and the file\nwhere the error is found. If the error is found in a file that is a part of your project you can click on the\nfile name to open the file in your editor and change the issue right away.\n\n## Hydration Mismatch\n\nHydration mismatch is a common issue in React applications. It occurs when the server-rendered HTML does not match the\nHTML generated by the client. This can cause unexpected behavior in your application,\nsuch as the loss of user input or the loss of scroll position. In React Router it can also cause FOUC (Flash of Unstyled Content).\n\nTo avoid hydration mismatch, you should make sure that the HTML generated by the server matches the HTML generated by\nthe client.\n\nThese kind of issues are very hard to track down because they can be caused by a lot of different things.\n\nIf a hydration mismatch happens the errors tab will show you the **diff** between the server and client HTML, allowing\nyou to analyze the differences and fix the issue.\n\n<InfoAlert>\nHydration mismatches happen on document requests (hard refresh or initial load in React Router). So if you don't see it at first\ntry refreshing your page.\n</InfoAlert>",
	},
	{
		title: "Settings Tab",
		summary: "Beginner's Guide",
		description: "Detailed overview of all features on the Settings Tab.",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var p=Object.create;var h=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),v=(i,e)=>{for(var n in e)h(i,n,{get:e[n],enumerable:!0})},r=(i,e,n,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let l of g(e))!m.call(i,l)&&l!==n&&h(i,l,{get:()=>e[l],enumerable:!(o=f(e,l))||o.enumerable});return i};var w=(i,e,n)=>(n=i!=null?p(b(i)):{},r(e||!i||!i.__esModule?h(n,"default",{value:i,enumerable:!0}):n,i)),T=i=>r(h({},"__esModule",{value:!0}),i);var c=y((L,d)=>{d.exports=_jsx_runtime});var x={};v(x,{default:()=>u});var t=w(c());function a(i){let e={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...i.components},{InfoAlert:n,WarningAlert:o}=e;return n||s("InfoAlert",!0),o||s("WarningAlert",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"The settings tab is where you can override the default settings for your project."}),`\n`,(0,t.jsx)(e.h2,{id:"position",children:"Position"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the position of the React Router Devtools trigger (the button that opens the panel). The possible values are:"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"top-left"})," - the trigger will be positioned at the top left corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"top-right"})," - the trigger will be positioned at the top right corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"bottom-left"})," - the trigger will be positioned at the bottom left corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"bottom-right"})," - the trigger will be positioned at the bottom right corner of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"middle-left"})," - the trigger will be positioned at the middle left of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"middle-right"})," - the trigger will be positioned at the middle right of the screen"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:"default-open",children:"Default Open"}),`\n`,(0,t.jsxs)(e.p,{children:["This option is used to set the initial state of the panel. If set to ",(0,t.jsx)(e.code,{children:"true"})," the panel will be open by default, if set to ",(0,t.jsx)(e.code,{children:"false"}),`\nthe panel will be closed by default.`]}),`\n`,(0,t.jsx)(e.h2,{id:"expansion-level",children:"Expansion Level"}),`\n`,(0,t.jsxs)(e.p,{children:["This option is used to set the initial expansion level of the returned JSON data in the ",(0,t.jsx)(e.strong,{children:"Active Page"}),` tab. By default it is set to\n0 and if you open up the `,(0,t.jsx)(e.strong,{children:"Active Page"})," and look at the returned loader data it will look like this:"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`"data": { ... } +\n`})}),`\n`,(0,t.jsx)(e.p,{children:"If you set the expansion level to 1 the returned loader data will look like this:"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`"data": {\n    "property": "value"\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:"height",children:"Height"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the initial height of the panel. The default value is 400px."}),`\n`,(0,t.jsx)(e.h2,{id:"min-height",children:"Min Height"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the minimum height of the panel. The default value is 200px."}),`\n`,(0,t.jsx)(e.h2,{id:"max-height",children:"Max Height"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the maximum height of the panel. The default value is 800px."}),`\n`,(0,t.jsx)(e.h2,{id:"hide-until-hover",children:"Hide Until Hover"}),`\n`,(0,t.jsxs)(e.p,{children:["This option is used to set whether the trigger should be hidden until you hover over it. The default value is ",(0,t.jsx)(e.code,{children:"false"}),"."]}),`\n`,(0,t.jsx)(e.h2,{id:"panel-location",children:"Panel Location"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the location of the panel. The possible values are:"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"top"})," - the panel will be positioned at the top of the screen"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"bottom"})," - the panel will be positioned at the bottom of the screen"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:"require-url-flag",children:"Require URL Flag"}),`\n`,(0,t.jsxs)(e.p,{children:["This option is used to set whether the panel should be opened only if the URL contains a specific flag. The default value is ",(0,t.jsx)(e.code,{children:"false"}),"."]}),`\n`,(0,t.jsxs)(o,{title:"Be careful!",children:[(0,t.jsxs)(e.p,{children:["If you set this option to ",(0,t.jsx)(e.code,{children:"true"}),` and you forget to set the URL flag, the panel will hide and you will not be able to see it\nuntil you enter the url flag.`]}),(0,t.jsxs)(e.p,{children:["The default one is ",(0,t.jsx)(e.code,{children:"rdt=true"})," and if you set this option to ",(0,t.jsx)(e.code,{children:"true"})," you will have to add ",(0,t.jsx)(e.code,{children:"?rdt=true"})," to the URL in order to see the panel."]})]}),`\n`,(0,t.jsx)(e.h2,{id:"url-flag",children:"URL Flag"}),`\n`,(0,t.jsxs)(e.p,{children:["This option is used to set the URL flag that is required to open the panel. The default value is ",(0,t.jsx)(e.code,{children:"rdt"}),"."]}),`\n`,(0,t.jsxs)(e.p,{children:["You can set it to whatever you wish and if you set the ",(0,t.jsx)(e.strong,{children:"Require URL Flag"})," option to ",(0,t.jsx)(e.code,{children:"true"})," you will have to add ",(0,t.jsx)(e.code,{children:"?yourFlag=true"})," to the URL in order to see the panel."]}),`\n`,(0,t.jsx)(e.h2,{id:"route-boundary-gradient",children:"Route Boundary Gradient"}),`\n`,(0,t.jsx)(e.p,{children:"This option is used to set the color of the route boundary gradient. The possible values are:"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"sea"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"hyper"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"gotham"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"gray"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"watermelon"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"ice"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"silver"})}),`\n`]}),`\n`,(0,t.jsx)(n,{children:(0,t.jsxs)(e.p,{children:["This changes the color of the route boundary gradient in the ",(0,t.jsx)(e.strong,{children:"Active Page"})," tab. When you hover over any route in the panel it will show you it\'s boundaries."]})}),`\n`,(0,t.jsxs)(e.p,{children:["The default value is ",(0,t.jsx)(e.code,{children:"ice"}),"."]})]})}function u(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,{...i,children:(0,t.jsx)(a,{...i})}):a(i)}function s(i,e){throw new Error("Expected "+(e?"component":"object")+" `"+i+"` to be defined: you likely forgot to import, pass, or provide it.")}return T(x);})();\n;return Component;',
		_meta: {
			filePath: "03-features/07-settings-tab.mdx",
			fileName: "07-settings-tab.mdx",
			directory: "03-features",
			extension: "mdx",
			path: "03-features/07-settings-tab",
		},
		slug: "features/settings-tab",
		section: "03-features",
		rawMdx:
			'The settings tab is where you can override the default settings for your project.\n\n\n## Position\n\nThis option is used to set the position of the React Router Devtools trigger (the button that opens the panel). The possible values are:\n- `top-left` - the trigger will be positioned at the top left corner of the screen\n- `top-right` - the trigger will be positioned at the top right corner of the screen\n- `bottom-left` - the trigger will be positioned at the bottom left corner of the screen\n- `bottom-right` - the trigger will be positioned at the bottom right corner of the screen\n- `middle-left` - the trigger will be positioned at the middle left of the screen\n- `middle-right` - the trigger will be positioned at the middle right of the screen\n\n## Default Open\n\nThis option is used to set the initial state of the panel. If set to `true` the panel will be open by default, if set to `false`\nthe panel will be closed by default.\n\n## Expansion Level\n\nThis option is used to set the initial expansion level of the returned JSON data in the **Active Page** tab. By default it is set to\n0 and if you open up the **Active Page** and look at the returned loader data it will look like this:\n\n```ts\n"data": { ... } +\n```\n\nIf you set the expansion level to 1 the returned loader data will look like this:\n\n```ts\n"data": {\n    "property": "value"\n}\n```\n\n## Height\n\nThis option is used to set the initial height of the panel. The default value is 400px.\n\n## Min Height\n\nThis option is used to set the minimum height of the panel. The default value is 200px.\n\n## Max Height\n\nThis option is used to set the maximum height of the panel. The default value is 800px.\n\n## Hide Until Hover\n\nThis option is used to set whether the trigger should be hidden until you hover over it. The default value is `false`.\n\n## Panel Location\n\nThis option is used to set the location of the panel. The possible values are:\n- `top` - the panel will be positioned at the top of the screen\n- `bottom` - the panel will be positioned at the bottom of the screen\n\n## Require URL Flag\n\nThis option is used to set whether the panel should be opened only if the URL contains a specific flag. The default value is `false`.\n\n<WarningAlert title="Be careful!">\nIf you set this option to `true` and you forget to set the URL flag, the panel will hide and you will not be able to see it\nuntil you enter the url flag.\n\nThe default one is `rdt=true` and if you set this option to `true` you will have to add `?rdt=true` to the URL in order to see the panel.\n</WarningAlert>\n\n## URL Flag\n\nThis option is used to set the URL flag that is required to open the panel. The default value is `rdt`.\n\nYou can set it to whatever you wish and if you set the **Require URL Flag** option to `true` you will have to add `?yourFlag=true` to the URL in order to see the panel.\n\n## Route Boundary Gradient\n\nThis option is used to set the color of the route boundary gradient. The possible values are:\n- `sea`\n- `hyper`\n- `gotham`\n- `gray`\n- `watermelon`\n- `ice`\n- `silver`\n\n<InfoAlert>\nThis changes the color of the route boundary gradient in the **Active Page** tab. When you hover over any route in the panel it will show you it\'s boundaries.\n</InfoAlert>\n\nThe default value is `ice`.',
	},
	{
		title: "Detached mode",
		summary: "Beginner's Guide",
		description: "How you can detach your panel into a new window",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var w=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var x=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),g=(e,n)=>{for(var o in n)i(e,o,{get:n[o],enumerable:!0})},c=(e,n,o,h)=>{if(n&&typeof n=="object"||typeof n=="function")for(let a of p(n))!f.call(e,a)&&a!==o&&i(e,a,{get:()=>n[a],enumerable:!(h=m(n,a))||h.enumerable});return e};var y=(e,n,o)=>(o=e!=null?w(u(e)):{},c(n||!e||!e.__esModule?i(o,"default",{value:e,enumerable:!0}):o,e)),_=e=>c(i({},"__esModule",{value:!0}),e);var l=x((k,d)=>{d.exports=_jsx_runtime});var b={};g(b,{default:()=>s});var t=y(l());function r(e){let n={p:"p",...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:`There is a special button on the bottom left side of the panel above the X button.\nWhen you click on it, the panel will detach and open in a new window.`}),`\n`,(0,t.jsx)(n.p,{children:`The detached window will keep in sync with the main panel and will show the same content.\nThe logs on the server will happen twice, once for the main panel and once for the detached window.`}),`\n`,(0,t.jsx)(n.p,{children:`When you close the detached window, or the main panel, the other one will be terminated and closed.\nIn case the detached mode hangs for some reason, you can always return it to the main site by\nclicking the trigger while in detached mode.`})]})}function s(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}return _(b);})();\n;return Component;',
		_meta: {
			filePath: "03-features/08-detach.mdx",
			fileName: "08-detach.mdx",
			directory: "03-features",
			extension: "mdx",
			path: "03-features/08-detach",
		},
		slug: "features/detach",
		section: "03-features",
		rawMdx:
			"There is a special button on the bottom left side of the panel above the X button.\nWhen you click on it, the panel will detach and open in a new window.\n\nThe detached window will keep in sync with the main panel and will show the same content.\nThe logs on the server will happen twice, once for the main panel and once for the detached window.\n\nWhen you close the detached window, or the main panel, the other one will be terminated and closed.\nIn case the detached mode hangs for some reason, you can always return it to the main site by\nclicking the trigger while in detached mode.",
	},
	{
		title: "Migration guide",
		summary: "Beginner's Guide",
		description: "Migration guide from remix-development-tools",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var x=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),h=(o,e)=>{for(var t in e)i(o,t,{get:e[t],enumerable:!0})},a=(o,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of p(e))!v.call(o,n)&&n!==t&&i(o,n,{get:()=>e[n],enumerable:!(s=f(e,n))||s.enumerable});return o};var y=(o,e,t)=>(t=o!=null?m(g(o)):{},a(e||!o||!o.__esModule?i(t,"default",{value:o,enumerable:!0}):t,o)),_=o=>a(i({},"__esModule",{value:!0}),o);var c=x((C,u)=>{u.exports=_jsx_runtime});var D={};h(D,{default:()=>l});var r=y(c());function d(o){let e={code:"code",h3:"h3",p:"p",pre:"pre",...o.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h3,{id:"viteconfigts",children:"vite.config.ts"}),`\n`,(0,r.jsxs)(e.p,{children:["If you\'re migrating your ",(0,r.jsx)(e.code,{children:"remix-development-tools"}),` from v4.x to react-router v7 and you were already running it as\na Vite plugin here is all you need to do:`]}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-diff",children:`import { defineConfig } from \'vite\';\n- import { vitePlugin as remix } from \'@remix-run/dev\';\n+ import { reactRouter } from \'@react-router/dev/vite\';\n- import { remixDevTools } from \'remix-development-tools\'\n+ import { reactRouterDevTools } from \'react-router-devtools\'\n\nexport default defineConfig({\n-  plugins: [remixDevTools(), remix()],\n+  plugins: [reactRouterDevTools(), reactRouter()],\n})\n`})}),`\n`,(0,r.jsx)(e.p,{children:"And that\'s it! You should be good to go. If you have any issues, please reach out to us."})]})}function l(o={}){let{wrapper:e}=o.components||{};return e?(0,r.jsx)(e,{...o,children:(0,r.jsx)(d,{...o})}):d(o)}return _(D);})();\n;return Component;',
		_meta: {
			filePath: "04-guides/01-migration.mdx",
			fileName: "01-migration.mdx",
			directory: "04-guides",
			extension: "mdx",
			path: "04-guides/01-migration",
		},
		slug: "guides/migration",
		section: "04-guides",
		rawMdx:
			"### vite.config.ts\n\nIf you're migrating your `remix-development-tools` from v4.x to react-router v7 and you were already running it as\na Vite plugin here is all you need to do:\n\n```diff\nimport { defineConfig } from 'vite';\n- import { vitePlugin as remix } from '@remix-run/dev';\n+ import { reactRouter } from '@react-router/dev/vite';\n- import { remixDevTools } from 'remix-development-tools'\n+ import { reactRouterDevTools } from 'react-router-devtools'\n\nexport default defineConfig({\n-  plugins: [remixDevTools(), remix()],\n+  plugins: [reactRouterDevTools(), reactRouter()],\n})\n```\n\n\nAnd that's it! You should be good to go. If you have any issues, please reach out to us.",
	},
	{
		title: "Plugins",
		summary: "Beginner's Guide",
		description: "React Router Devtools plugins",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var o in e)i(n,o,{get:e[o],enumerable:!0})},l=(n,e,o,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of g(e))!y.call(n,r)&&r!==o&&i(n,r,{get:()=>e[r],enumerable:!(a=h(e,r))||a.enumerable});return n};var j=(n,e,o)=>(o=n!=null?p(m(n)):{},l(e||!n||!n.__esModule?i(o,"default",{value:n,enumerable:!0}):o,n)),v=n=>l(i({},"__esModule",{value:!0}),n);var d=f((D,u)=>{u.exports=_jsx_runtime});var w={};x(w,{default:()=>c});var t=j(d());function s(n){let e={code:"code",h2:"h2",p:"p",pre:"pre",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"plugins-in-vite",children:"Plugins in Vite"}),`\n`,(0,t.jsx)(e.p,{children:"Plugins work in a different way in Vite. You create a directory for plugins and just provide the path to the directory to the plugin. The plugin will automatically import all the plugins from the directory and add them to the dev tools. You only need to make sure your exports are named exports and not default exports and that they are uniquely named."}),`\n`,(0,t.jsx)(e.p,{children:"You can create a directory called plugins in your project and add your plugins there. Then you can add the following to your vite.config.js file:"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:`import { reactRouterDevTools } from "react-router-devtools";\nexport default defineConfig({\n  plugins: [\n    reactRouterDevTools({\n      pluginDir: "./plugins"\n  })],\n});\n`})}),`\n`,(0,t.jsx)(e.p,{children:"After you\'re done share your plugin with the community by opening a discussion and a PR with the plugin to the repo!"})]})}function c(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(s,{...n})}):s(n)}return v(w);})();\n;return Component;',
		_meta: {
			filePath: "04-guides/02-plugins.mdx",
			fileName: "02-plugins.mdx",
			directory: "04-guides",
			extension: "mdx",
			path: "04-guides/02-plugins",
		},
		slug: "guides/plugins",
		section: "04-guides",
		rawMdx:
			'## Plugins in Vite\nPlugins work in a different way in Vite. You create a directory for plugins and just provide the path to the directory to the plugin. The plugin will automatically import all the plugins from the directory and add them to the dev tools. You only need to make sure your exports are named exports and not default exports and that they are uniquely named.\n\nYou can create a directory called plugins in your project and add your plugins there. Then you can add the following to your vite.config.js file:\n```ts\nimport { reactRouterDevTools } from "react-router-devtools";\nexport default defineConfig({\n  plugins: [\n    reactRouterDevTools({\n      pluginDir: "./plugins"\n  })],\n});\n```\n\nAfter you\'re done share your plugin with the community by opening a discussion and a PR with the plugin to the repo!',
	},
	{
		title: "Integration with Shopify Hydrogen and Oxygen",
		summary: "Beginner's Guide",
		description: "Guide on getting react-router-devtools working with Shopify Hydrogen and Oxygen",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var m=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),v=(o,e)=>{for(var t in e)i(o,t,{get:e[t],enumerable:!0})},s=(o,e,t,d)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of g(e))!y.call(o,r)&&r!==t&&i(o,r,{get:()=>e[r],enumerable:!(d=u(e,r))||d.enumerable});return o};var b=(o,e,t)=>(t=o!=null?p(f(o)):{},s(e||!o||!o.__esModule?i(t,"default",{value:o,enumerable:!0}):t,o)),x=o=>s(i({},"__esModule",{value:!0}),o);var a=m((j,c)=>{c.exports=_jsx_runtime});var k={};v(k,{default:()=>h});var n=b(a());function l(o){let e={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...o.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{id:"adding-react-router-devtools-to-your-project",children:"Adding react-router-devtools to your project"}),`\n`,(0,n.jsx)(e.p,{children:`Even though react-router-devtools is an ESM package, some of the dependencies it relies on are unfortunately not. This means that\nthese dependencies will break the shopify CLI when running your React Router app built on top of Shopify Hydrogen and Oxygen.`}),`\n`,(0,n.jsxs)(e.p,{children:["In case your package.json script ",(0,n.jsx)(e.code,{children:"dev"})," command looks like this:"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-json",children:`"dev": "shopify hydrogen dev --codegen",\n`})}),`\n`,(0,n.jsx)(e.p,{children:"This means you\'ll have to do the following to get it working."}),`\n`,(0,n.jsxs)(e.p,{children:["Go to your ",(0,n.jsx)(e.code,{children:"vite.config.ts"})," and add ",(0,n.jsx)(e.code,{children:"react-router-devtools"}),", depending on your project the file will look something like this:"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-diff",children:`import { defineConfig } from \'vite\';\nimport { hydrogen } from \'@shopify/hydrogen/vite\';\nimport { oxygen } from \'@shopify/mini-oxygen/vite\';\nimport { reactRouter } from \'@react-router/dev/vite\';\nimport tsconfigPaths from \'vite-tsconfig-paths\';\n+ import { reactRouterDevTools } from \'react-router-devtools\';\nexport default defineConfig({\n  plugins: [\n+   reactRouterDevTools(),\n    hydrogen(),\n    oxygen(),\n    reactRouter({\n      presets: [hydrogen.preset()]\n    }),\n    tsconfigPaths(),\n  ],\n  build: {\n    assetsInlineLimit: 0,\n  },\n  ssr: {\n    optimizeDeps: {\n      include: [],\n    },\n  },\n});\n\n`})}),`\n`,(0,n.jsx)(e.h2,{id:"adding-problematic-dependencies",children:"Adding problematic dependencies"}),`\n`,(0,n.jsxs)(e.p,{children:["Add the following dependencies to ",(0,n.jsx)(e.code,{children:"ssr.optimizeDeps.include"})," array:"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-diff",children:`export default defineConfig({\n  plugins: [\n    reactRouterDevTools(),\n    hydrogen(),\n    oxygen(),\n    reactRouter({\n      presets: [hydrogen.preset()]\n    }),\n    tsconfigPaths(),\n  ],\n  build: {\n    assetsInlineLimit: 0,\n  },\n+  ssr: {\n+    optimizeDeps: {\n+      include: [\n+        \'beautify\',\n+        \'react-diff-viewer-continued\',\n+        \'react-d3-tree\',\n+      ],\n+    },\n+  },\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{id:"debugging-issues",children:"Debugging issues"}),`\n`,(0,n.jsx)(e.p,{children:"If you\'re still having issues, look at the error log output by the Shopify CLI and see if there are any errors related to the dependencies, the usual errors you might see are:"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:"require is not defined"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:"module.exports is not defined"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:"Cannot find module \'X\'"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`This all indicated that there is a problem with a dependency that is used by react-router-devtools. Sometimes it\'s even a dependency not\ndirectly used by react-router-devtools, but it\'s a dependency of a dependency that is used by react-router-devtools.`}),`\n`,(0,n.jsx)(e.p,{children:`So if adding the first depedency in the error stack strace does not work, see if there are any additional dependencies in the stack trace before\nreact-router-devtools. This package will be the last one in the stack trace.`}),`\n`,(0,n.jsx)(e.p,{children:"Enjoy your new react-router-devtools \\u{1F680}"})]})}function h(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,{...o,children:(0,n.jsx)(l,{...o})}):l(o)}return x(k);})();\n;return Component;',
		_meta: {
			filePath: "04-guides/04-hydrogen-oxygen.mdx",
			fileName: "04-hydrogen-oxygen.mdx",
			directory: "04-guides",
			extension: "mdx",
			path: "04-guides/04-hydrogen-oxygen",
		},
		slug: "guides/hydrogen-oxygen",
		section: "04-guides",
		rawMdx:
			"## Adding react-router-devtools to your project\n\nEven though react-router-devtools is an ESM package, some of the dependencies it relies on are unfortunately not. This means that\nthese dependencies will break the shopify CLI when running your React Router app built on top of Shopify Hydrogen and Oxygen.\n\nIn case your package.json script `dev` command looks like this:\n\n```json\n\"dev\": \"shopify hydrogen dev --codegen\",\n```\n\nThis means you'll have to do the following to get it working.\n\nGo to your `vite.config.ts` and add `react-router-devtools`, depending on your project the file will look something like this:\n```diff\nimport { defineConfig } from 'vite';\nimport { hydrogen } from '@shopify/hydrogen/vite';\nimport { oxygen } from '@shopify/mini-oxygen/vite';\nimport { reactRouter } from '@react-router/dev/vite';\nimport tsconfigPaths from 'vite-tsconfig-paths';\n+ import { reactRouterDevTools } from 'react-router-devtools';\nexport default defineConfig({\n  plugins: [\n+   reactRouterDevTools(),\n    hydrogen(),\n    oxygen(),\n    reactRouter({\n      presets: [hydrogen.preset()]\n    }),\n    tsconfigPaths(),\n  ],\n  build: {\n    assetsInlineLimit: 0,\n  },\n  ssr: {\n    optimizeDeps: {\n      include: [],\n    },\n  },\n});\n\n```\n## Adding problematic dependencies\n\nAdd the following dependencies to `ssr.optimizeDeps.include` array:\n```diff\nexport default defineConfig({\n  plugins: [\n    reactRouterDevTools(),\n    hydrogen(),\n    oxygen(),\n    reactRouter({\n      presets: [hydrogen.preset()]\n    }),\n    tsconfigPaths(),\n  ],\n  build: {\n    assetsInlineLimit: 0,\n  },\n+  ssr: {\n+    optimizeDeps: {\n+      include: [\n+        'beautify',\n+        'react-diff-viewer-continued',\n+        'react-d3-tree',\n+      ],\n+    },\n+  },\n});\n```\n\n### Debugging issues\nIf you're still having issues, look at the error log output by the Shopify CLI and see if there are any errors related to the dependencies, the usual errors you might see are:\n- `require is not defined`\n- `module.exports is not defined`\n- `Cannot find module 'X'`\n\nThis all indicated that there is a problem with a dependency that is used by react-router-devtools. Sometimes it's even a dependency not\ndirectly used by react-router-devtools, but it's a dependency of a dependency that is used by react-router-devtools.\n\nSo if adding the first depedency in the error stack strace does not work, see if there are any additional dependencies in the stack trace before\nreact-router-devtools. This package will be the last one in the stack trace.\n\n\nEnjoy your new react-router-devtools 🚀",
	},
	{
		title: "Contributing to React Router Devtools",
		summary: "Beginner's Guide",
		description: "Contributions to React Router Devtools are welcome! To contribute, please follow these guidelines.",
		lastUpdated: "2025-07-07",
		author: "forge-42",
		content:
			'var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var r in e)i(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,l)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of m(e))!g.call(n,o)&&o!==r&&i(n,o,{get:()=>e[o],enumerable:!(l=p(e,o))||l.enumerable});return n};var b=(n,e,r)=>(r=n!=null?h(f(n)):{},c(e||!n||!n.__esModule?i(r,"default",{value:n,enumerable:!0}):r,n)),_=n=>c(i({},"__esModule",{value:!0}),n);var s=x((C,a)=>{a.exports=_jsx_runtime});var v={};y(v,{default:()=>u});var t=b(s());function d(n){let e={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"contributing",children:"Contributing"}),`\n`,(0,t.jsx)(e.p,{children:"Contributions to React Router Devtools are welcome! To contribute, please follow these guidelines:"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:"Fork the repository and clone it locally."}),`\n`,(0,t.jsx)(e.li,{children:"Create a new branch for your feature or bug fix."}),`\n`,(0,t.jsxs)(e.li,{children:["Run ",(0,t.jsx)(e.code,{children:"npm install"})]}),`\n`,(0,t.jsxs)(e.li,{children:["Run ",(0,t.jsx)(e.code,{children:"npm run dev"})," to start the development server with a vanilla React Router app setup."]}),`\n`,(0,t.jsx)(e.li,{children:"Implement your changes, adhering to the existing code style and best practices."}),`\n`,(0,t.jsx)(e.li,{children:"Please add tests for any new features or bug fixes."}),`\n`,(0,t.jsx)(e.li,{children:"Commit and push your changes to your forked repository."}),`\n`,(0,t.jsx)(e.li,{children:"Open a pull request, providing a clear description of your changes and their purpose."}),`\n`]})]})}function u(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}return _(v);})();\n;return Component;',
		_meta: {
			filePath: "04-guides/05-contributing.mdx",
			fileName: "05-contributing.mdx",
			directory: "04-guides",
			extension: "mdx",
			path: "04-guides/05-contributing",
		},
		slug: "guides/contributing",
		section: "04-guides",
		rawMdx:
			"## Contributing\n\nContributions to React Router Devtools are welcome! To contribute, please follow these guidelines:\n\n1. Fork the repository and clone it locally.\n2. Create a new branch for your feature or bug fix.\n3. Run `npm install`\n4. Run `npm run dev` to start the development server with a vanilla React Router app setup.\n5. Implement your changes, adhering to the existing code style and best practices.\n5. Please add tests for any new features or bug fixes.\n6. Commit and push your changes to your forked repository.\n7. Open a pull request, providing a clear description of your changes and their purpose.",
	},
]
